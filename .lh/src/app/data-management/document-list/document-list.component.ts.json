{
    "sourceFile": "src/app/data-management/document-list/document-list.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1721571072337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721571599070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n import { Component } from '@angular/core';\n+import { WebService } from '../../web.service';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { MatDialog } from '@angular/material/dialog';\n \n @Component({\n   selector: 'app-document-list',\n   templateUrl: './document-list.component.html',\n@@ -7,5 +10,19 @@\n })\n export class DocumentListComponent {\n   newObj = new Document ()\n \n+  constructor(private webService: WebService, public snackBar: MatSnackBar) {\n }\n+\n+onSelectType(obj: any) {\n+  \n+}\n+\n+openSnackBar(message: string) {\n+  this.snackBar.open(message, \"ok\", {\n+    duration: 2000,\n+  });\n+}\n+\n+\n+}\n"
                },
                {
                    "date": 1721639471038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,130 @@\n-import { Component } from '@angular/core';\n+import { AfterViewInit, Component, ViewChild } from '@angular/core';\n+import { MatDialog } from '@angular/material/dialog';\n+import { MatPaginator } from '@angular/material/paginator';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { MatSort } from '@angular/material/sort';\n+import { MatTableDataSource } from '@angular/material/table';\n import { WebService } from '../../web.service';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { MatDialog } from '@angular/material/dialog';\n+import { Common } from '../../common';\n \n @Component({\n   selector: 'app-document-list',\n   templateUrl: './document-list.component.html',\n-  styleUrl: './document-list.component.css'\n+  styleUrls: ['./document-list.component.css']\n })\n-export class DocumentListComponent {\n-  newObj = new Document ()\n+export class DocumentListComponent implements AfterViewInit {\n+  newObj = new Document();\n+  documentList = [\n+    {\n+      \"name\": \"Personal\",\n+      \"value\": 1\n+    },\n+    {\n+      \"name\": \"Cars\",\n+      \"value\": 2\n+    },\n+  ];\n \n-  constructor(private webService: WebService, public snackBar: MatSnackBar) {\n-}\n+  @ViewChild(MatPaginator) paginator!: MatPaginator;\n+  @ViewChild(MatSort) sort!: MatSort;\n \n-onSelectType(obj: any) {\n-  \n-}\n+  displayedColumns: string[] = ['no', 'name', 'type', 'action'];\n+  listArray: Array<Document> = [];\n+  dataSource: MatTableDataSource<Document> = new MatTableDataSource<Document>();\n \n-openSnackBar(message: string) {\n-  this.snackBar.open(message, \"ok\", {\n-    duration: 2000,\n-  });\n-}\n+  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {}\n \n+  ngOnInit(): void {\n+    this.getList();\n+  }\n \n+  ngAfterViewInit(): void {\n+    this.dataSource.paginator = this.paginator;\n+    this.dataSource.sort = this.sort;\n+  }\n+\n+  applyFilter(filterValue: string) {\n+    this.dataSource.filter = filterValue.trim().toLowerCase();\n+    if (this.dataSource.paginator) {\n+      this.dataSource.paginator.firstPage();\n+    }\n+  }\n+\n+  openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+      duration: 2000,\n+    });\n+  }\n+\n+  getDocTypeName(obj: Document) {\n+    switch (obj.type) {\n+      case 1:\n+        return \"Personal Doc\";\n+      default:\n+        return \"Cars Doc\";\n+    }\n+  }\n+\n+  addData() {\n+    if (this.newObj.name == \"\") {\n+      this.openSnackBar(\"Please enter document name\");\n+      return;\n+    }\n+\n+    this.webService.action(Common.svAddDocument, { \"document_name\": this.newObj.name, \"document_type\": this.newObj.type.toString() }, true).then((responseObj: any) => {\n+      if (responseObj.status == 1) {\n+        this.newObj = new Document();\n+        this.getList();\n+        this.openSnackBar(responseObj.message);\n+      } else {\n+        this.openSnackBar(responseObj.message);\n+      }\n+    });\n+  }\n+\n+  openDialogEdit(obj: Document) {\n+    const dialogRef = this.dialog.open(EditDocumentComponent, {\n+      width: '400px',\n+      data: obj\n+    });\n+    dialogRef.afterClosed().subscribe((updateInfo) => {\n+      Common.Dlog(updateInfo);\n+      if (updateInfo) {\n+        const index = this.listArray.findIndex(item => item.doc_id == updateInfo.doc_id);\n+        this.listArray[index] = updateInfo;\n+        this.dataSource = new MatTableDataSource(this.listArray);\n+        this.dataSource.paginator = this.paginator;\n+        this.dataSource.sort = this.sort;\n+      }\n+    });\n+  }\n+\n+  deleteData(obj: Document) {\n+    this.webService.action(Common.svDeleteDocument, {\"doc_id\": obj.doc_id }, true ).then((responseObj: any) => {\n+      if(responseObj.status == 1) {\n+        this.listArray = this.listArray.filter(item => item.doc_id!= obj.doc_id);\n+        this.dataSource = new MatTableDataSource(this.listArray);\n+        this.dataSource.paginator = this.paginator;\n+        this.dataSource.sort = this.sort;\n+        this.openSnackBar(\"document deleted successfully\");\n+      }else{\n+        this.openSnackBar(responseObj.message);\n+      }\n+    });\n+  }\n+\n+  getList() {\n+    this.webService.action(Common.svListDocument, {}, true).then((responseObj: any) => {\n+      Common.Dlog(responseObj);\n+      if (responseObj.status == 1) {\n+        this.listArray = responseObj.payload;\n+      } else {\n+        this.listArray = [];\n+        this.openSnackBar(responseObj.message);\n+      }\n+      this.dataSource = new MatTableDataSource(this.listArray);\n+      this.dataSource.paginator = this.paginator;\n+      this.dataSource.sort = this.sort;\n+    });\n+  }\n }\n"
                },
                {
                    "date": 1721639988522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n import { AfterViewInit, Component, ViewChild } from '@angular/core';\n import { MatDialog } from '@angular/material/dialog';\n import { MatPaginator } from '@angular/material/paginator';\n import { MatSnackBar } from '@angular/material/snack-bar';\n@@ -6,15 +7,16 @@\n import { MatTableDataSource } from '@angular/material/table';\n import { WebService } from '../../web.service';\n import { Common } from '../../common';\n \n+\n @Component({\n   selector: 'app-document-list',\n   templateUrl: './document-list.component.html',\n   styleUrls: ['./document-list.component.css']\n })\n export class DocumentListComponent implements AfterViewInit {\n-  newObj = new Document();\n+  newObj = new Document()\n   documentList = [\n     {\n       \"name\": \"Personal\",\n       \"value\": 1\n@@ -22,19 +24,22 @@\n     {\n       \"name\": \"Cars\",\n       \"value\": 2\n     },\n-  ];\n+  ]\n \n   @ViewChild(MatPaginator) paginator!: MatPaginator;\n   @ViewChild(MatSort) sort!: MatSort;\n \n-  displayedColumns: string[] = ['no', 'name', 'type', 'action'];\n+  displayedColumns: string[] = ['no', 'name', 'type', 'action']\n   listArray: Array<Document> = [];\n   dataSource: MatTableDataSource<Document> = new MatTableDataSource<Document>();\n \n-  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {}\n \n+  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {\n+\n+  }\n+\n   ngOnInit(): void {\n     this.getList();\n   }\n \n@@ -42,8 +47,11 @@\n     this.dataSource.paginator = this.paginator;\n     this.dataSource.sort = this.sort;\n   }\n \n+  onSelectType(obj: any) {\n+  }\n+\n   applyFilter(filterValue: string) {\n     this.dataSource.filter = filterValue.trim().toLowerCase();\n     if (this.dataSource.paginator) {\n       this.dataSource.paginator.firstPage();\n@@ -56,75 +64,137 @@\n     });\n   }\n \n   getDocTypeName(obj: Document) {\n-    switch (obj.type) {\n+    switch (obj.nodeType) {\n       case 1:\n-        return \"Personal Doc\";\n+        return \"Personal Doc\"\n+\n+\n       default:\n-        return \"Cars Doc\";\n+        return \"Cars Doc\"\n     }\n   }\n \n   addData() {\n-    if (this.newObj.name == \"\") {\n+    if (this.newObj.nodeName == \"\") {\n       this.openSnackBar(\"Please enter document name\");\n-      return;\n+      return\n     }\n \n-    this.webService.action(Common.svAddDocument, { \"document_name\": this.newObj.name, \"document_type\": this.newObj.type.toString() }, true).then((responseObj: any) => {\n+    this.webService.action(Common.svAddDocument, { \"document_name\": this.newObj.nodeName, \"document_type\": this.newObj.nodeType.toString() }, true).then((responseObj: any) => {\n       if (responseObj.status == 1) {\n         this.newObj = new Document();\n         this.getList();\n         this.openSnackBar(responseObj.message);\n       } else {\n         this.openSnackBar(responseObj.message);\n       }\n-    });\n+    })\n   }\n \n   openDialogEdit(obj: Document) {\n-    const dialogRef = this.dialog.open(EditDocumentComponent, {\n+    const dialogRef = this.dialog.open(DocumentListComponent, {\n       width: '400px',\n       data: obj\n-    });\n-    dialogRef.afterClosed().subscribe((updateInfo) => {\n+    })\n+    dialogRef.afterClosed().subscribe( (updateInfo) => {\n       Common.Dlog(updateInfo);\n-      if (updateInfo) {\n-        const index = this.listArray.findIndex(item => item.doc_id == updateInfo.doc_id);\n+      if (updateInfo) \n+      {\n+        const index = this.listArray.findIndex(item => item.doctype == updateInfo.doc_id);\n         this.listArray[index] = updateInfo;\n         this.dataSource = new MatTableDataSource(this.listArray);\n         this.dataSource.paginator = this.paginator;\n         this.dataSource.sort = this.sort;\n       }\n-    });\n+    } )\n   }\n \n   deleteData(obj: Document) {\n-    this.webService.action(Common.svDeleteDocument, {\"doc_id\": obj.doc_id }, true ).then((responseObj: any) => {\n+    this.webService.action(Common.svDeleteDocument, {\"doc_id\": obj.doctype }, true ).then( (responseObj: any) => {\n       if(responseObj.status == 1) {\n-        this.listArray = this.listArray.filter(item => item.doc_id!= obj.doc_id);\n+        this.listArray = this.listArray.filter(item => item.doctype != obj.doctype);\n         this.dataSource = new MatTableDataSource(this.listArray);\n         this.dataSource.paginator = this.paginator;\n         this.dataSource.sort = this.sort;\n         this.openSnackBar(\"document deleted successfully\");\n       }else{\n         this.openSnackBar(responseObj.message);\n       }\n-    });\n+    } )\n   }\n \n+\n+\n   getList() {\n+\n     this.webService.action(Common.svListDocument, {}, true).then((responseObj: any) => {\n+\n       Common.Dlog(responseObj);\n       if (responseObj.status == 1) {\n         this.listArray = responseObj.payload;\n+        \n+\n       } else {\n         this.listArray = [];\n         this.openSnackBar(responseObj.message);\n       }\n+\n       this.dataSource = new MatTableDataSource(this.listArray);\n       this.dataSource.paginator = this.paginator;\n       this.dataSource.sort = this.sort;\n-    });\n+\n+    })\n   }\n+\n+\n }\n+\n+\n+\n+/*import { AfterViewInit, Component } from '@angular/core';\n+import { WebService } from '../../web.service';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { MatDialog } from '@angular/material/dialog';\n+\n+@Component({\n+  selector: 'app-document-list',\n+  templateUrl: './document-list.component.html',\n+  styleUrl: './document-list.component.css'\n+})\n+export class DocumentListComponent implements AfterViewInit {\n+  newObj = new Document ()\n+  documentList = [\n+    {\n+      \"name\": \"Personal\",\n+      \"value\": 1\n+    },\n+    {\n+      \"name\": \"Cars\",\n+      \"value\": 2\n+    },\n+  ]\n+\n+  constructor(private webService: WebService, public snackBar: MatSnackBar) {\n+}\n+  ngAfterViewInit(): void {\n+    throw new Error('Method not implemented.');\n+  }\n+\n+onSelectType(obj: any) {\n+  //this.newObj.type = obj\n+}\n+\n+openSnackBar(message: string) {\n+  this.snackBar.open(message, \"ok\", {\n+    duration: 2000,\n+  });\n+}\n+\n+addData() {\n+  if (this.newObj.name == \"\") {\n+    this.openSnackBar(\"Please enter document name\");\n+    return\n+  }\n+}\n+}*/\n"
                },
                {
                    "date": 1721640384321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,24 +109,11 @@\n       }\n     } )\n   }\n \n-  deleteData(obj: Document) {\n-    this.webService.action(Common.svDeleteDocument, {\"doc_id\": obj.doctype }, true ).then( (responseObj: any) => {\n-      if(responseObj.status == 1) {\n-        this.listArray = this.listArray.filter(item => item.doctype != obj.doctype);\n-        this.dataSource = new MatTableDataSource(this.listArray);\n-        this.dataSource.paginator = this.paginator;\n-        this.dataSource.sort = this.sort;\n-        this.openSnackBar(\"document deleted successfully\");\n-      }else{\n-        this.openSnackBar(responseObj.message);\n-      }\n-    } )\n-  }\n+  \n \n \n-\n   getList() {\n \n     this.webService.action(Common.svListDocument, {}, true).then((responseObj: any) => {\n \n"
                },
                {
                    "date": 1721644491484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,145 +1,60 @@\n \n+\n import { AfterViewInit, Component, ViewChild } from '@angular/core';\n import { MatDialog } from '@angular/material/dialog';\n import { MatPaginator } from '@angular/material/paginator';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n import { MatSort } from '@angular/material/sort';\n import { MatTableDataSource } from '@angular/material/table';\n import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n \n+export interface Document {\n+  id: number;\n+  name: string;\n+  type: string;\n+}\n \n @Component({\n   selector: 'app-document-list',\n   templateUrl: './document-list.component.html',\n   styleUrls: ['./document-list.component.css']\n })\n export class DocumentListComponent implements AfterViewInit {\n-  newObj = new Document()\n-  documentList = [\n-    {\n-      \"name\": \"Personal\",\n-      \"value\": 1\n-    },\n-    {\n-      \"name\": \"Cars\",\n-      \"value\": 2\n-    },\n-  ]\n+openDialog(_t53: any) {\n+throw new Error('Method not implemented.');\n+}\n+deleteDocument(_t53: any) {\n+throw new Error('Method not implemented.');\n+}\n+  displayedColumns: string[] = ['no', 'name', 'type', 'action'];\n+  dataSource = new MatTableDataSource<Document>([]);\n \n   @ViewChild(MatPaginator) paginator!: MatPaginator;\n   @ViewChild(MatSort) sort!: MatSort;\n \n-  displayedColumns: string[] = ['no', 'name', 'type', 'action']\n-  listArray: Array<Document> = [];\n-  dataSource: MatTableDataSource<Document> = new MatTableDataSource<Document>();\n+  constructor(private webService: WebService, private dialog: MatDialog) { }\n \n-\n-  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {\n-\n-  }\n-\n-  ngOnInit(): void {\n-    this.getList();\n-  }\n-\n   ngAfterViewInit(): void {\n     this.dataSource.paginator = this.paginator;\n     this.dataSource.sort = this.sort;\n-  }\n \n-  onSelectType(obj: any) {\n-  }\n-\n-  applyFilter(filterValue: string) {\n-    this.dataSource.filter = filterValue.trim().toLowerCase();\n     if (this.dataSource.paginator) {\n       this.dataSource.paginator.firstPage();\n     }\n+    \n+    \n   }\n \n-  openSnackBar(message: string) {\n-    this.snackBar.open(message, \"ok\", {\n-      duration: 2000,\n-    });\n-  }\n+  applyFilter(event: Event) {\n+    const filterValue = (event.target as HTMLInputElement).value;\n+    this.dataSource.filter = filterValue.trim().toLowerCase();\n \n-  getDocTypeName(obj: Document) {\n-    switch (obj.nodeType) {\n-      case 1:\n-        return \"Personal Doc\"\n-\n-\n-      default:\n-        return \"Cars Doc\"\n+    if (this.dataSource.paginator) {\n+      this.dataSource.paginator.firstPage();\n     }\n   }\n-\n-  addData() {\n-    if (this.newObj.nodeName == \"\") {\n-      this.openSnackBar(\"Please enter document name\");\n-      return\n-    }\n-\n-    this.webService.action(Common.svAddDocument, { \"document_name\": this.newObj.nodeName, \"document_type\": this.newObj.nodeType.toString() }, true).then((responseObj: any) => {\n-      if (responseObj.status == 1) {\n-        this.newObj = new Document();\n-        this.getList();\n-        this.openSnackBar(responseObj.message);\n-      } else {\n-        this.openSnackBar(responseObj.message);\n-      }\n-    })\n-  }\n-\n-  openDialogEdit(obj: Document) {\n-    const dialogRef = this.dialog.open(DocumentListComponent, {\n-      width: '400px',\n-      data: obj\n-    })\n-    dialogRef.afterClosed().subscribe( (updateInfo) => {\n-      Common.Dlog(updateInfo);\n-      if (updateInfo) \n-      {\n-        const index = this.listArray.findIndex(item => item.doctype == updateInfo.doc_id);\n-        this.listArray[index] = updateInfo;\n-        this.dataSource = new MatTableDataSource(this.listArray);\n-        this.dataSource.paginator = this.paginator;\n-        this.dataSource.sort = this.sort;\n-      }\n-    } )\n-  }\n-\n-  \n-\n-\n-  getList() {\n-\n-    this.webService.action(Common.svListDocument, {}, true).then((responseObj: any) => {\n-\n-      Common.Dlog(responseObj);\n-      if (responseObj.status == 1) {\n-        this.listArray = responseObj.payload;\n-        \n-\n-      } else {\n-        this.listArray = [];\n-        this.openSnackBar(responseObj.message);\n-      }\n-\n-      this.dataSource = new MatTableDataSource(this.listArray);\n-      this.dataSource.paginator = this.paginator;\n-      this.dataSource.sort = this.sort;\n-\n-    })\n-  }\n-\n-\n }\n \n-\n-\n /*import { AfterViewInit, Component } from '@angular/core';\n import { WebService } from '../../web.service';\n import { MatSnackBar } from '@angular/material/snack-bar';\n import { MatDialog } from '@angular/material/dialog';\n"
                },
                {
                    "date": 1721649513993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,158 @@\n \n \n import { AfterViewInit, Component, ViewChild } from '@angular/core';\n-import { MatDialog } from '@angular/material/dialog';\n import { MatPaginator } from '@angular/material/paginator';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n import { MatSort } from '@angular/material/sort';\n import { MatTableDataSource } from '@angular/material/table';\n+import { Common } from '../../common';\n+import { Document } from '../../model/document';\n+\n+import { MatDialog } from '@angular/material/dialog';\n+\n+//import { EditDocumentComponent } from './edit-document/edit-document.component';\n import { WebService } from '../../web.service';\n \n-export interface Document {\n-  id: number;\n-  name: string;\n-  type: string;\n-}\n-\n @Component({\n   selector: 'app-document-list',\n   templateUrl: './document-list.component.html',\n   styleUrls: ['./document-list.component.css']\n })\n export class DocumentListComponent implements AfterViewInit {\n-openDialog(_t53: any) {\n-throw new Error('Method not implemented.');\n-}\n-deleteDocument(_t53: any) {\n-throw new Error('Method not implemented.');\n-}\n-  displayedColumns: string[] = ['no', 'name', 'type', 'action'];\n-  dataSource = new MatTableDataSource<Document>([]);\n+  newObj = new Document()\n+  documentList = [\n+    {\n+      \"name\": \"Personal\",\n+      \"value\": 1\n+    },\n+    {\n+      \"name\": \"Cars\",\n+      \"value\": 2\n+    },\n+  ]\n \n   @ViewChild(MatPaginator) paginator!: MatPaginator;\n   @ViewChild(MatSort) sort!: MatSort;\n \n-  constructor(private webService: WebService, private dialog: MatDialog) { }\n+  displayedColumns: string[] = ['no', 'name', 'type', 'action']\n+  listArray: Array<Document> = [];\n+  dataSource: MatTableDataSource<Document> = new MatTableDataSource<Document>();\n \n+\n+  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {\n+\n+  }\n+\n+  ngOnInit(): void {\n+    this.getList();\n+  }\n+\n   ngAfterViewInit(): void {\n     this.dataSource.paginator = this.paginator;\n     this.dataSource.sort = this.sort;\n+  }\n \n+  onSelectType(obj: any) {\n+  }\n+\n+  applyFilter(filterValue: string) {\n+    this.dataSource.filter = filterValue.trim().toLowerCase();\n     if (this.dataSource.paginator) {\n       this.dataSource.paginator.firstPage();\n     }\n-    \n-    \n   }\n \n-  applyFilter(event: Event) {\n-    const filterValue = (event.target as HTMLInputElement).value;\n-    this.dataSource.filter = filterValue.trim().toLowerCase();\n+  openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+      duration: 2000,\n+    });\n+  }\n \n-    if (this.dataSource.paginator) {\n-      this.dataSource.paginator.firstPage();\n+  getDocTypeName(obj: Document) {\n+    switch (obj.type) {\n+      case 1:\n+        return \"Personal Doc\"\n+\n+\n+      default:\n+        return \"Cars Doc\"\n     }\n   }\n+\n+  addData() {\n+    if (this.newObj.name == \"\") {\n+      this.openSnackBar(\"Please enter document name\");\n+      return\n+    }\n+\n+    this.webService.action(Common.svAddDocument, { \"document_name\": this.newObj.name, \"document_type\": this.newObj.type.toString() }, true).then((responseObj: any) => {\n+      if (responseObj.status == 1) {\n+        this.newObj = new Document();\n+        this.getList();\n+        this.openSnackBar(responseObj.message);\n+      } else {\n+        this.openSnackBar(responseObj.message);\n+      }\n+    })\n+  }\n+\n+  /*openDialogEdit(obj: Document) {\n+    const dialogRef = this.dialog.open(EditDocumentComponent, {\n+      width: '400px',\n+      data: obj\n+    })\n+    dialogRef.afterClosed().subscribe( (updateInfo) => {\n+      Common.Dlog(updateInfo);\n+      if (updateInfo) \n+      {\n+        const index = this.listArray.findIndex(item => item.doc_id == updateInfo.doc_id);\n+        this.listArray[index] = updateInfo;\n+        this.dataSource = new MatTableDataSource(this.listArray);\n+        this.dataSource.paginator = this.paginator;\n+        this.dataSource.sort = this.sort;\n+      }\n+    } )\n+  }*/\n+\n+  deleteData(obj: Document) {\n+    this.webService.action(Common.svDeleteDocument, {\"doc_id\": obj.doc_id }, true ).then( (responseObj: any) => {\n+      if(responseObj.status == 1) {\n+        this.listArray = this.listArray.filter(item => item.doc_id != obj.doc_id);\n+        this.dataSource = new MatTableDataSource(this.listArray);\n+        this.dataSource.paginator = this.paginator;\n+        this.dataSource.sort = this.sort;\n+        this.openSnackBar(\"document deleted successfully\");\n+      }else{\n+        this.openSnackBar(responseObj.message);\n+      }\n+    } )\n+  }\n+\n+\n+\n+  getList() {\n+\n+    this.webService.action(Common.svListDocument, {}, true).then((responseObj: any) => {\n+\n+      Common.Dlog(responseObj);\n+      if (responseObj.status == 1) {\n+        this.listArray = responseObj.payload;\n+        \n+\n+      } else {\n+        this.listArray = [];\n+        this.openSnackBar(responseObj.message);\n+      }\n+\n+      this.dataSource = new MatTableDataSource(this.listArray);\n+      this.dataSource.paginator = this.paginator;\n+      this.dataSource.sort = this.sort;\n+\n+    })\n+  }\n+\n+\n }\n \n /*import { AfterViewInit, Component } from '@angular/core';\n import { WebService } from '../../web.service';\n"
                },
                {
                    "date": 1721649784170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,11 @@\n         this.openSnackBar(responseObj.message);\n       }\n     })\n   }\n+  getList() {\n+    throw new Error('Method not implemented.');\n+  } }\n \n   /*openDialogEdit(obj: Document) {\n     const dialogRef = this.dialog.open(EditDocumentComponent, {\n       width: '400px',\n@@ -111,9 +114,9 @@\n         this.dataSource.paginator = this.paginator;\n         this.dataSource.sort = this.sort;\n       }\n     } )\n-  }*/\n+  }\n \n   deleteData(obj: Document) {\n     this.webService.action(Common.svDeleteDocument, {\"doc_id\": obj.doc_id }, true ).then( (responseObj: any) => {\n       if(responseObj.status == 1) {\n"
                },
                {
                    "date": 1721654004698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { Document } from '../../model/document';\n \n import { MatDialog } from '@angular/material/dialog';\n \n-//import { EditDocumentComponent } from './edit-document/edit-document.component';\n+import { EditDocumentComponent } from './edit-document/edit-document.component';\n import { WebService } from '../../web.service';\n \n @Component({\n   selector: 'app-document-list',\n@@ -94,13 +94,11 @@\n         this.openSnackBar(responseObj.message);\n       }\n     })\n   }\n-  getList() {\n-    throw new Error('Method not implemented.');\n-  } }\n+  \n \n-  /*openDialogEdit(obj: Document) {\n+  openDialogEdit(obj: Document) {\n     const dialogRef = this.dialog.open(EditDocumentComponent, {\n       width: '400px',\n       data: obj\n     })\n"
                },
                {
                    "date": 1726389008088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,51 +153,4 @@\n   }\n \n \n }\n-\n-/*import { AfterViewInit, Component } from '@angular/core';\n-import { WebService } from '../../web.service';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { MatDialog } from '@angular/material/dialog';\n-\n-@Component({\n-  selector: 'app-document-list',\n-  templateUrl: './document-list.component.html',\n-  styleUrl: './document-list.component.css'\n-})\n-export class DocumentListComponent implements AfterViewInit {\n-  newObj = new Document ()\n-  documentList = [\n-    {\n-      \"name\": \"Personal\",\n-      \"value\": 1\n-    },\n-    {\n-      \"name\": \"Cars\",\n-      \"value\": 2\n-    },\n-  ]\n-\n-  constructor(private webService: WebService, public snackBar: MatSnackBar) {\n-}\n-  ngAfterViewInit(): void {\n-    throw new Error('Method not implemented.');\n-  }\n-\n-onSelectType(obj: any) {\n-  //this.newObj.type = obj\n-}\n-\n-openSnackBar(message: string) {\n-  this.snackBar.open(message, \"ok\", {\n-    duration: 2000,\n-  });\n-}\n-\n-addData() {\n-  if (this.newObj.name == \"\") {\n-    this.openSnackBar(\"Please enter document name\");\n-    return\n-  }\n-}\n-}*/\n"
                }
            ],
            "date": 1721571072337,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-document-list',\n  templateUrl: './document-list.component.html',\n  styleUrl: './document-list.component.css'\n})\nexport class DocumentListComponent {\n  newObj = new Document ()\n\n}\n"
        }
    ]
}