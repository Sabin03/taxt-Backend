{
    "sourceFile": "src/app/data-management/service-list/service-list.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1721734982359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726388965587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,182 @@\n+import { AfterViewInit, Component, ViewChild } from '@angular/core';\n+import { MatDialog } from '@angular/material/dialog';\n+import { MatPaginator } from '@angular/material/paginator';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { MatSort } from '@angular/material/sort';\n+import { MatTableDataSource } from '@angular/material/table';\n+\n+import { Common } from '../../common';\n+import { WebService } from '../../web.service';\n+import { Service } from '../../model/service';\n+import { EditServiceComponent } from './edit-service/edit-service.component';\n+\n+\n+\n+@Component({\n+  selector: 'app-service-list',\n+  templateUrl: './service-list.component.html',\n+  styleUrls: ['./service-list.component.css']\n+})\n+export class ServiceListComponent implements AfterViewInit {\n+  newObj = new Service()\n+\n+  iconImageFile?: File;\n+  iconImageName: string = \"\"; \n+\n+  topIconImageFile?: File;\n+  topIconImageName: string = \"\"; \n+\n+  @ViewChild(MatPaginator) paginator!: MatPaginator;\n+  @ViewChild(MatSort) sort!: MatSort;\n+\n+  displayedColumns: string[] = ['no', 'icon', 'name', 'top_icon', 'description', 'seat', 'color',  'gender', 'action']\n+  listArray: Array<Service> = [];\n+  dataSource: MatTableDataSource<Service> = new MatTableDataSource<Service>();\n+\n+\n+  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {\n+\n+  }\n+\n+  ngOnInit(): void {\n+    this.getList();\n+  }\n+\n+  ngAfterViewInit(): void {\n+    this.dataSource.paginator = this.paginator;\n+    this.dataSource.sort = this.sort;\n+  }\n+\n+  onSelectType(obj: any) {\n+  }\n+\n+  onIconChange(event: any) {\n+    if (event.target.files && event.target.files[0]) {\n+      const file: File = event.target.files[0];\n+      this.iconImageFile = file;\n+      this.iconImageName = this.iconImageFile?.name ?? \"\";\n+    }else{\n+      this.iconImageName = \"Select Image\"\n+    }\n+  }\n+\n+  onTopIconChange(event: any) {\n+    if (event.target.files && event.target.files[0]) {\n+      const file: File = event.target.files[0];\n+      this.topIconImageFile = file;\n+      this.topIconImageName = this.topIconImageFile?.name ?? \"\";\n+    } else {\n+      this.topIconImageName = \"Select Image\"\n+    }\n+  }\n+\n+  applyFilter(filterValue: string) {\n+    this.dataSource.filter = filterValue.trim().toLowerCase();\n+    if (this.dataSource.paginator) {\n+      this.dataSource.paginator.firstPage();\n+    }\n+  }\n+\n+  openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+      duration: 2000,\n+    });\n+  }\n+\n+  addData() {\n+    if (this.newObj.service_name == \"\") {\n+      this.openSnackBar(\"Please enter service name\");\n+      return\n+    }\n+\n+    if(this.newObj.color.length != 6) {\n+      this.openSnackBar(\"Please enter valid color\");\n+      return\n+    }\n+\n+    if (this.iconImageFile == null) {\n+      this.openSnackBar(\"Please select service icon\");\n+      return\n+    }\n+\n+    if (this.topIconImageFile == null) {\n+      this.openSnackBar(\"Please select service top icon\");\n+      return\n+    }\n+\n+    const formData = new FormData();\n+    formData.append('service_name', this.newObj.service_name );\n+    formData.append('seat', this.newObj.seat.toString());\n+    formData.append('color', this.newObj.color);\n+    formData.append('gender', this.newObj.gender);\n+    formData.append('description', this.newObj.description);\n+    formData.append('icon', this.iconImageFile!, this.iconImageName);\n+    formData.append('top_icon', this.topIconImageFile!, this.topIconImageName);\n+\n+    this.webService.action(Common.svAddService, formData , true).then((responseObj: any) => {\n+      if (responseObj.status == 1) {\n+        this.newObj = new Service();\n+        this.getList();\n+        this.openSnackBar(responseObj.message);\n+      } else {\n+        this.openSnackBar(responseObj.message);\n+      }\n+    })\n+  }\n+\n+  openDialogEdit(obj: Service) {\n+    const dialogRef = this.dialog.open(EditServiceComponent, {\n+      width: '400px',\n+      data: obj\n+    })\n+    dialogRef.afterClosed().subscribe((updateInfo) => {\n+      Common.Dlog(updateInfo);\n+      if (updateInfo) {\n+        const index = this.listArray.findIndex(item => item.service_id == updateInfo.service_id);\n+        this.listArray[index] = updateInfo;\n+        this.dataSource = new MatTableDataSource(this.listArray);\n+        this.dataSource.paginator = this.paginator;\n+        this.dataSource.sort = this.sort;\n+      }\n+    })\n+  }\n+\n+  deleteData(obj: Service) {\n+    this.webService.action(Common.svDeleteService, { \"service_id\": obj.service_id }, true).then((responseObj: any) => {\n+      if (responseObj.status == 1) {\n+        this.listArray = this.listArray.filter(item => item.service_id != obj.service_id);\n+        this.dataSource = new MatTableDataSource(this.listArray);\n+        this.dataSource.paginator = this.paginator;\n+        this.dataSource.sort = this.sort;\n+        this.openSnackBar(\"service deleted successfully\");\n+      } else {\n+        this.openSnackBar(responseObj.message);\n+      }\n+    })\n+  }\n+\n+\n+\n+  getList() {\n+\n+    this.webService.action(Common.svListService, {}, true).then((responseObj: any) => {\n+\n+      Common.Dlog(responseObj);\n+      if (responseObj.status == 1) {\n+        this.listArray = responseObj.payload;\n+\n+\n+      } else {\n+        this.listArray = [];\n+        this.openSnackBar(responseObj.message);\n+      }\n+\n+      this.dataSource = new MatTableDataSource(this.listArray);\n+      this.dataSource.paginator = this.paginator;\n+      this.dataSource.sort = this.sort;\n+\n+    })\n+  }\n+\n+\n+}\n"
                }
            ],
            "date": 1721734982359,
            "name": "Commit-0",
            "content": "import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n//import { Common } from 'src/app/common';\n//import { Service } from 'src/app/model/service';\n//import { WebService } from 'src/app/web.service';\n//import { EditServiceComponent } from './edit-service/edit-service.component';\nimport { Common } from '../../common';\nimport { WebService } from '../../web.service';\nimport { Service } from '../../model/service';\nimport { EditServiceComponent } from './edit-service/edit-service.component';\n\n\n\n@Component({\n  selector: 'app-service-list',\n  templateUrl: './service-list.component.html',\n  styleUrls: ['./service-list.component.css']\n})\nexport class ServiceListComponent implements AfterViewInit {\n  newObj = new Service()\n\n  iconImageFile?: File;\n  iconImageName: string = \"\"; \n\n  topIconImageFile?: File;\n  topIconImageName: string = \"\"; \n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  displayedColumns: string[] = ['no', 'icon', 'name', 'top_icon', 'description', 'seat', 'color',  'gender', 'action']\n  listArray: Array<Service> = [];\n  dataSource: MatTableDataSource<Service> = new MatTableDataSource<Service>();\n\n\n  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {\n\n  }\n\n  ngOnInit(): void {\n    this.getList();\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  onSelectType(obj: any) {\n  }\n\n  onIconChange(event: any) {\n    if (event.target.files && event.target.files[0]) {\n      const file: File = event.target.files[0];\n      this.iconImageFile = file;\n      this.iconImageName = this.iconImageFile?.name ?? \"\";\n    }else{\n      this.iconImageName = \"Select Image\"\n    }\n  }\n\n  onTopIconChange(event: any) {\n    if (event.target.files && event.target.files[0]) {\n      const file: File = event.target.files[0];\n      this.topIconImageFile = file;\n      this.topIconImageName = this.topIconImageFile?.name ?? \"\";\n    } else {\n      this.topIconImageName = \"Select Image\"\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message, \"ok\", {\n      duration: 2000,\n    });\n  }\n\n  addData() {\n    if (this.newObj.service_name == \"\") {\n      this.openSnackBar(\"Please enter service name\");\n      return\n    }\n\n    if(this.newObj.color.length != 6) {\n      this.openSnackBar(\"Please enter valid color\");\n      return\n    }\n\n    if (this.iconImageFile == null) {\n      this.openSnackBar(\"Please select service icon\");\n      return\n    }\n\n    if (this.topIconImageFile == null) {\n      this.openSnackBar(\"Please select service top icon\");\n      return\n    }\n\n    const formData = new FormData();\n    formData.append('service_name', this.newObj.service_name );\n    formData.append('seat', this.newObj.seat.toString());\n    formData.append('color', this.newObj.color);\n    formData.append('gender', this.newObj.gender);\n    formData.append('description', this.newObj.description);\n    formData.append('icon', this.iconImageFile!, this.iconImageName);\n    formData.append('top_icon', this.topIconImageFile!, this.topIconImageName);\n\n    this.webService.action(Common.svAddService, formData , true).then((responseObj: any) => {\n      if (responseObj.status == 1) {\n        this.newObj = new Service();\n        this.getList();\n        this.openSnackBar(responseObj.message);\n      } else {\n        this.openSnackBar(responseObj.message);\n      }\n    })\n  }\n\n  openDialogEdit(obj: Service) {\n    const dialogRef = this.dialog.open(EditServiceComponent, {\n      width: '400px',\n      data: obj\n    })\n    dialogRef.afterClosed().subscribe((updateInfo) => {\n      Common.Dlog(updateInfo);\n      if (updateInfo) {\n        const index = this.listArray.findIndex(item => item.service_id == updateInfo.service_id);\n        this.listArray[index] = updateInfo;\n        this.dataSource = new MatTableDataSource(this.listArray);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n      }\n    })\n  }\n\n  deleteData(obj: Service) {\n    this.webService.action(Common.svDeleteService, { \"service_id\": obj.service_id }, true).then((responseObj: any) => {\n      if (responseObj.status == 1) {\n        this.listArray = this.listArray.filter(item => item.service_id != obj.service_id);\n        this.dataSource = new MatTableDataSource(this.listArray);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n        this.openSnackBar(\"service deleted successfully\");\n      } else {\n        this.openSnackBar(responseObj.message);\n      }\n    })\n  }\n\n\n\n  getList() {\n\n    this.webService.action(Common.svListService, {}, true).then((responseObj: any) => {\n\n      Common.Dlog(responseObj);\n      if (responseObj.status == 1) {\n        this.listArray = responseObj.payload;\n\n\n      } else {\n        this.listArray = [];\n        this.openSnackBar(responseObj.message);\n      }\n\n      this.dataSource = new MatTableDataSource(this.listArray);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n\n    })\n  }\n\n\n}\n"
        }
    ]
}