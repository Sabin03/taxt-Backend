{
    "sourceFile": "src/app/user-management/user-list/user-list.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1722100731792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1722100731792,
            "name": "Commit-0",
            "content": "import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { User } from '../../model/user';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { WebService } from '../../web.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Common } from '../../common';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrl: './user-list.component.css'\n})\nexport class UserListComponent implements AfterViewInit {\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  displayedColumns: string[] = ['no', 'name', 'image', 'email', 'mobile', 'device_source', 'gender', 'zone_name', 'is_block', \"status\", \"is_online\", 'created_date', 'action']\n  listArray: Array<User> = [];\n  dataSource: MatTableDataSource<User> = new MatTableDataSource<User>();\n\n\n  constructor(private webService: WebService, public snackBar: MatSnackBar, public dialog: MatDialog) {\n\n  }\n\n  ngOnInit(): void {\n    this.getList();\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  onSelectType(obj: any) {\n  }\n\n  genderName(obj: any) {\n    switch (obj.gender) {\n      case \"M\":\n\n        return \"Male\"\n\n      default:\n\n        return \"Female\"\n    }\n  }\n\n  isBlockColor(obj: any) {\n    switch (obj.is_block) {\n      case 1:\n\n        return \"#ff0000\"\n\n      default:\n        return \"#00ff00\"\n    }\n  }\n\n  isBlock(obj: any) {\n    switch (obj.is_block) {\n      case 1:\n\n        return \"Block\"\n\n      default:\n\n        return \"Unblock\"\n    }\n  }\n\n  isOnline(obj: any) {\n    switch (obj.is_online) {\n      case 1:\n\n        return \"Online\"\n\n      default:\n\n        return \"Offline\"\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message, \"ok\", {\n      duration: 2000,\n    });\n  }\n\n\n\n  openDialogEdit(obj: User) {\n    // const dialogRef = this.dialog.open(EditServiceComponent, {\n    //   width: '400px',\n    //   data: obj\n    // })\n    // dialogRef.afterClosed().subscribe((updateInfo) => {\n    //   Common.Dlog(updateInfo);\n    //   if (updateInfo) {\n    //     const index = this.listArray.findIndex(item => item.service_id == updateInfo.service_id);\n    //     this.listArray[index] = updateInfo;\n    //     this.dataSource = new MatTableDataSource(this.listArray);\n    //     this.dataSource.paginator = this.paginator;\n    //     this.dataSource.sort = this.sort;\n    //   }\n    // })\n  }\n\n  deleteData(obj: User) {\n    // this.webService.action(Common.svDeleteService, { \"service_id\": obj.service_id }, true).then((responseObj: any) => {\n    //   if (responseObj.status == 1) {\n    //     this.listArray = this.listArray.filter(item => item.service_id != obj.service_id);\n    //     this.dataSource = new MatTableDataSource(this.listArray);\n    //     this.dataSource.paginator = this.paginator;\n    //     this.dataSource.sort = this.sort;\n    //     this.openSnackBar(\"service deleted successfully\");\n    //   } else {\n    //     this.openSnackBar(responseObj.message);\n    //   }\n    // })\n  }\n\n\n\n  getList() {\n\n    this.webService.action(Common.svListUser, {}, true).then((responseObj: any) => {\n\n      Common.Dlog(responseObj);\n      if (responseObj.status == 1) {\n        this.listArray = responseObj.payload;\n\n\n      } else {\n        this.listArray = [];\n        this.openSnackBar(responseObj.message);\n      }\n\n      this.dataSource = new MatTableDataSource(this.listArray);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n\n    })\n  }\n\n\n}\n\n"
        }
    ]
}