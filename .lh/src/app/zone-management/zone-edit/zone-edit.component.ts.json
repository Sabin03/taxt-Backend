{
    "sourceFile": "src/app/zone-management/zone-edit/zone-edit.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1722248473307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1722248473307,
            "name": "Commit-0",
            "content": "import { Component, ViewChild } from '@angular/core';\nimport { GoogleMap } from '@angular/google-maps';\nimport { Observable, catchError, map, of } from 'rxjs';\nimport { ZoneList } from '../../model/zone-list';\nimport { Service } from '../../model/service';\nimport { HttpClient } from '@angular/common/http';\nimport { WebService } from '../../web.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute } from '@angular/router';\nimport { Common } from '../../common';\n\n@Component({\n  selector: 'app-zone-edit',\n  templateUrl: './zone-edit.component.html',\n  styleUrl: './zone-edit.component.css'\n})\nexport class ZoneEditComponent {\n\n  mapObj!: GoogleMap;\n  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n    if (m) {\n      this.mapObj = m;\n      this.initDrawingManager(m);\n    }\n  }\n\n  apiLoaded: Observable<boolean>;\n  drawingManager: any;\n\n  polygons: Array<any> = [];\n  subArray: Array<any> = [];\n  shapes: Array<any> = [];\n  polygon: any;\n\n  options: google.maps.MapOptions = {\n    zoom: 14,\n    disableDefaultUI: true\n  };\n\n  zone_id = '';\n\n\n  zoneObj: ZoneList = new ZoneList();\n  serviceList: Array<Service> = [];\n  \n  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar, public route: ActivatedRoute) {\n\n    this.route.params.subscribe( params => {\n      this.zone_id = params['zone_id'];\n    } )\n\n    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg&libraries=drawing', 'callback')\n      .pipe(\n        map(() => true),\n        catchError(() => of(false))\n      );\n      \n      \n  }\n  ngOnInit(): void {\n    \n  }\n\n  openSnackBar(message: string) {\n    this.snackBar.open(message, \"ok\", {\n      duration: 2000,\n    });\n  }\n\n  serviceCheckClick(serviceObj: Service, event: any) {\n    serviceObj.isSelect = event.checked;\n  }\n\n  initDrawingManager(map: GoogleMap) {\n    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n      drawingMode: google.maps.drawing.OverlayType.POLYGON,\n      drawingControl: true,\n      drawingControlOptions: {\n        position: google.maps.ControlPosition.TOP_CENTER,\n        drawingModes: [\n          google.maps.drawing.OverlayType.POLYGON,\n        ],\n      },\n      polygonOptions: {\n        editable: true,\n        strokeColor: '#00ff00',\n      }\n    };\n    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n    this.drawingManager.setMap(map.googleMap);\n\n\n    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n      //Polygon Drawn\n      if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n        const newShape = event.overlay;\n        newShape.type = event.type;\n        this.shapes.push(newShape);\n        if (this.drawingManager.getDrawingMode()) {\n          this.drawingManager.setDrawingMode(null);\n        }\n      }\n    });\n\n    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n      Common.Dlog(\"polygoncomplete\");\n      this.polygon = polygon;\n      polygon.setEditable(true);\n      const polygonBounds = polygon.getPath();\n      this.subArray = [];\n      polygonBounds.forEach((polygonLatLong: any) => {\n        Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n        this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n\n      });\n      Common.Dlog(JSON.stringify(this.subArray));\n    });\n\n    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n      Common.Dlog(\"drawingmode_changed\");\n      if (this.drawingManager.getDrawingMode() != null) {\n\n        this.shapes.forEach(shape => {\n          shape.setMap(null);\n        });\n\n        this.shapes = [];\n        this.polygon = null;\n      }\n    });\n\n    this.getZoneDetail()\n  }\n\n  //MARK: ServiceCall\n\n  getZoneDetail(){\n    \n    this.webService.action(Common.svDetailZone, {'zone_id': this.zone_id}, true).then((responseObj: any) => {\n\n      Common.Dlog(responseObj);\n      if (responseObj.status == 1) {\n        this.zoneObj =  responseObj.payload[0];\n        this.serviceList = responseObj.service;\n\n\n        \n        this.serviceList.forEach(serviceObj => {\n            this.zoneObj.on_service_id.split(',').forEach( (service_id) => {\n              if (serviceObj.service_id.toString() == service_id) {\n                serviceObj.isSelect = true;\n              }\n            } )\n        });\n\n        setTimeout(() => {\n          const mapVal = JSON.parse(this.zoneObj.zone_json)\n\n          Common.Dlog(mapVal);\n\n          const bounds = new google.maps.LatLngBounds();\n\n          mapVal.forEach((element : any) => {\n              bounds.extend(element);\n          });\n\n          this.polygon = new google.maps.Polygon({\n            paths: mapVal,\n            strokeOpacity: 1.0,\n            strokeWeight: 2,\n            editable: true,\n            strokeColor: '#00ff00',\n          });\n\n\n          if (this.mapObj != null) {\n            this.polygon.setEditable(true)\n            this.polygon.setMap(this.mapObj.googleMap);\n            \n            this.shapes.push(this.polygon);\n            bounds.getCenter();\n            this.mapObj.googleMap?.fitBounds(bounds);\n          }else{\n            Common.Dlog(\"Map not init\")\n          }\n          \n\n        }, 500);\n\n      } else {\n        this.serviceList = [];\n      }\n    });\n  }\n\n  editZone() {\n    if (this.zoneObj.zone_name == '') {\n      this.openSnackBar(\"please enter zone name\");\n      return;\n    }\n\n    if (this.zoneObj.tax == '') {\n      this.openSnackBar(\"please enter tax value\");\n      return;\n    }\n\n    if (this.polygon == null || this.polygon == undefined) {\n      this.openSnackBar(\"please select zone area\");\n      return;\n    }\n\n    const polygonBounds = this.polygon.getPath();\n    this.subArray = [];\n\n    polygonBounds.forEach((polygonLatlong: any) => {\n      this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n    });\n\n    let serviceId = '';\n\n    this.serviceList.forEach( (serviceObj) => {\n      if(serviceObj.isSelect == true) {\n        serviceId = serviceId + serviceObj.service_id.toString() + ',';\n      }\n    } )\n    serviceId =  serviceId.replace(/,\\s8$/,'');\n    const paraObj = {\n      \"zone_id\": this.zoneObj.zone_id.toString(),\n      \"zone_name\": this.zoneObj.zone_name,\n      \"city\": this.zoneObj.city,\n      \"zone_json\": JSON.stringify(this.subArray),\n      \"service_id\": serviceId,\n      \"tax\": this.zoneObj.tax,\n    }\n\n    Common.Dlog(paraObj);\n\n    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n\n      Common.Dlog(responseObj);\n\n      this.openSnackBar(responseObj.message)\n\n    });\n  }\n\n}\n"
        }
    ]
}