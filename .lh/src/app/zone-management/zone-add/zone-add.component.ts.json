{
    "sourceFile": "src/app/zone-management/zone-add/zone-add.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1722118085094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722118302603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,314 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  /*constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );*/\n+\n+\n+\n+constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+        .pipe(\n+            map(() => true),\n+            catchError(() => of(false))\n+        );\n+\n+\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+  initDrawingManager(map: GoogleMap) {\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [\n+                  google.maps.drawing.OverlayType.POLYGON,\n+              ],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+          }\n+      };\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          //Polygon Drawn\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n+  }\n+\n+  serviceCheckClick(serviceObj: Service, event: any) {\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+  }\n+\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+      docObj.isSelect = event.checked;\n+  }\n+\n+  getList() {\n+\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+          } else {\n+              this.serviceList = [];\n+          }\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n+  }\n+\n+  openSnackBar(message: string) {\n+      this.snackBar.open(message, \"ok\", {\n+          duration: 2000,\n+      });\n+  }\n+\n+  createZone() {\n+      if (this.zoneName == '') {\n+          this.openSnackBar(\"please enter zone name\");\n+          return;\n+      }\n+\n+      if (this.taxVal == '') {\n+          this.openSnackBar(\"please enter tax value\");\n+          return;\n+      }\n+\n+      if (this.polygon == null || this.polygon == undefined) {\n+          this.openSnackBar(\"please select zone area\");\n+          return;\n+      }\n+\n+      const dataObj = [];\n+\n+      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+          const serviceObj = this.serviceWisePriceDocument[i];\n+\n+          if (serviceObj.base_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_km_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_minute_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+              return;\n+          }\n+\n+          if (serviceObj.booking_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_fair == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_km == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+              return;\n+          }\n+\n+          if (serviceObj.cancel_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+              return;\n+          }\n+\n+          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+          const data = Object.assign({}, serviceObj);\n+          data['document_array'] = [];\n+          data['car_document_array'] = [];\n+          dataObj.push(data);\n+      }\n+\n+      const polygonBounds = this.polygon.getPath();\n+      this.subArray = [];\n+\n+      polygonBounds.forEach((polygonLatlong: any) => {\n+          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+      });\n+\n+      const paraObj = {\n+          \"zone_name\": this.zoneName,\n+          \"city\": this.cityName,\n+          \"zone_json\": JSON.stringify(this.subArray),\n+          \"price_json\": JSON.stringify(dataObj),\n+          \"tax\": this.taxVal.toString(),\n+      }\n+\n+      Common.Dlog(paraObj);\n+\n+      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.zoneName = '';\n+              this.cityName = '';\n+              this.taxVal = '';\n+              this.serviceWisePriceDocumentAll = [];\n+              this.serviceWisePriceDocument = [];\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              })\n+              this.shapes = [];\n+              this.polygon = null;\n+              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+          }\n+          this.openSnackBar(responseObj.message)\n+\n+      });\n+\n+  }\n+\n+  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+      docArr.forEach(item => {\n+          if (item.isSelect == true) {\n+              documentId = documentId + item.doc_id.toString() + ',';\n+          }\n+      });\n+\n+      return documentId.replace(/,\\s*$/, '');\n+  }\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722118404934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,314 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  /*constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );*/\n+\n+\n+\n+constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+        .pipe(\n+            map(() => true),\n+            catchError(() => of(false))\n+        );\n+\n+\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+  initDrawingManager(map: GoogleMap) {\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [\n+                  google.maps.drawing.OverlayType.POLYGON,\n+              ],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+          }\n+      };\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          //Polygon Drawn\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n+  }\n+\n+  serviceCheckClick(serviceObj: Service, event: any) {\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+  }\n+\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+      docObj.isSelect = event.checked;\n+  }\n+\n+  getList() {\n+\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+          } else {\n+              this.serviceList = [];\n+          }\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n+  }\n+\n+  openSnackBar(message: string) {\n+      this.snackBar.open(message, \"ok\", {\n+          duration: 2000,\n+      });\n+  }\n+\n+  createZone() {\n+      if (this.zoneName == '') {\n+          this.openSnackBar(\"please enter zone name\");\n+          return;\n+      }\n+\n+      if (this.taxVal == '') {\n+          this.openSnackBar(\"please enter tax value\");\n+          return;\n+      }\n+\n+      if (this.polygon == null || this.polygon == undefined) {\n+          this.openSnackBar(\"please select zone area\");\n+          return;\n+      }\n+\n+      const dataObj = [];\n+\n+      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+          const serviceObj = this.serviceWisePriceDocument[i];\n+\n+          if (serviceObj.base_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_km_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_minute_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+              return;\n+          }\n+\n+          if (serviceObj.booking_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_fair == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_km == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+              return;\n+          }\n+\n+          if (serviceObj.cancel_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+              return;\n+          }\n+\n+          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+          const data = Object.assign({}, serviceObj);\n+          data['document_array'] = [];\n+          data['car_document_array'] = [];\n+          dataObj.push(data);\n+      }\n+\n+      const polygonBounds = this.polygon.getPath();\n+      this.subArray = [];\n+\n+      polygonBounds.forEach((polygonLatlong: any) => {\n+          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+      });\n+\n+      const paraObj = {\n+          \"zone_name\": this.zoneName,\n+          \"city\": this.cityName,\n+          \"zone_json\": JSON.stringify(this.subArray),\n+          \"price_json\": JSON.stringify(dataObj),\n+          \"tax\": this.taxVal.toString(),\n+      }\n+\n+      Common.Dlog(paraObj);\n+\n+      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.zoneName = '';\n+              this.cityName = '';\n+              this.taxVal = '';\n+              this.serviceWisePriceDocumentAll = [];\n+              this.serviceWisePriceDocument = [];\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              })\n+              this.shapes = [];\n+              this.polygon = null;\n+              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+          }\n+          this.openSnackBar(responseObj.message)\n+\n+      });\n+\n+  }\n+\n+  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+      docArr.forEach(item => {\n+          if (item.isSelect == true) {\n+              documentId = documentId + item.doc_id.toString() + ',';\n+          }\n+      });\n+\n+      return documentId.replace(/,\\s*$/, '');\n+  }\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722118435939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+  initDrawingManager(map: GoogleMap) {\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [\n+                  google.maps.drawing.OverlayType.POLYGON,\n+              ],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+          }\n+      };\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          //Polygon Drawn\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n+  }\n+\n+  serviceCheckClick(serviceObj: Service, event: any) {\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+  }\n+\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+      docObj.isSelect = event.checked;\n+  }\n+\n+  getList() {\n+\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+          } else {\n+              this.serviceList = [];\n+          }\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n+  }\n+\n+  openSnackBar(message: string) {\n+      this.snackBar.open(message, \"ok\", {\n+          duration: 2000,\n+      });\n+  }\n+\n+  createZone() {\n+      if (this.zoneName == '') {\n+          this.openSnackBar(\"please enter zone name\");\n+          return;\n+      }\n+\n+      if (this.taxVal == '') {\n+          this.openSnackBar(\"please enter tax value\");\n+          return;\n+      }\n+\n+      if (this.polygon == null || this.polygon == undefined) {\n+          this.openSnackBar(\"please select zone area\");\n+          return;\n+      }\n+\n+      const dataObj = [];\n+\n+      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+          const serviceObj = this.serviceWisePriceDocument[i];\n+\n+          if (serviceObj.base_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_km_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_minute_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+              return;\n+          }\n+\n+          if (serviceObj.booking_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_fair == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_km == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+              return;\n+          }\n+\n+          if (serviceObj.cancel_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+              return;\n+          }\n+\n+          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+          const data = Object.assign({}, serviceObj);\n+          data['document_array'] = [];\n+          data['car_document_array'] = [];\n+          dataObj.push(data);\n+      }\n+\n+      const polygonBounds = this.polygon.getPath();\n+      this.subArray = [];\n+\n+      polygonBounds.forEach((polygonLatlong: any) => {\n+          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+      });\n+\n+      const paraObj = {\n+          \"zone_name\": this.zoneName,\n+          \"city\": this.cityName,\n+          \"zone_json\": JSON.stringify(this.subArray),\n+          \"price_json\": JSON.stringify(dataObj),\n+          \"tax\": this.taxVal.toString(),\n+      }\n+\n+      Common.Dlog(paraObj);\n+\n+      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.zoneName = '';\n+              this.cityName = '';\n+              this.taxVal = '';\n+              this.serviceWisePriceDocumentAll = [];\n+              this.serviceWisePriceDocument = [];\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              })\n+              this.shapes = [];\n+              this.polygon = null;\n+              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+          }\n+          this.openSnackBar(responseObj.message)\n+\n+      });\n+\n+  }\n+\n+  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+      docArr.forEach(item => {\n+          if (item.isSelect == true) {\n+              documentId = documentId + item.doc_id.toString() + ',';\n+          }\n+      });\n+\n+      return documentId.replace(/,\\s*$/, '');\n+  }\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722129485791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,946 +299,4 @@\n \n \n \n }\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  /*constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );*/\n-\n-\n-\n-constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-        .pipe(\n-            map(() => true),\n-            catchError(() => of(false))\n-        );\n-\n-\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-  initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n-  }\n-\n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n-\n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n-\n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n-      }\n-\n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n-\n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n-      }\n-\n-      const dataObj = [];\n-\n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n-\n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n-\n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n-\n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n-\n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n-\n-      const polygonBounds = this.polygon.getPath();\n-      this.subArray = [];\n-\n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-      });\n-\n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n-\n-      Common.Dlog(paraObj);\n-\n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n-\n-      });\n-\n-  }\n-\n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n-\n-      return documentId.replace(/,\\s*$/, '');\n-  }\n-\n-\n-\n-\n-}\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  /*constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );*/\n-\n-\n-\n-constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-        .pipe(\n-            map(() => true),\n-            catchError(() => of(false))\n-        );\n-\n-\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-  initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n-  }\n-\n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n-\n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n-\n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n-      }\n-\n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n-\n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n-      }\n-\n-      const dataObj = [];\n-\n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n-\n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n-\n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n-\n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n-\n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n-\n-      const polygonBounds = this.polygon.getPath();\n-      this.subArray = [];\n-\n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-      });\n-\n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n-\n-      Common.Dlog(paraObj);\n-\n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n-\n-      });\n-\n-  }\n-\n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n-\n-      return documentId.replace(/,\\s*$/, '');\n-  }\n-\n-\n-\n-\n-}\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  /*constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );*/\n-\n-\n-\n-constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-        .pipe(\n-            map(() => true),\n-            catchError(() => of(false))\n-        );\n-\n-\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-  initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n-  }\n-\n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n-\n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n-\n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n-      }\n-\n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n-\n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n-      }\n-\n-      const dataObj = [];\n-\n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n-\n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n-\n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n-\n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n-\n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n-\n-      const polygonBounds = this.polygon.getPath();\n-      this.subArray = [];\n-\n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-      });\n-\n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n-\n-      Common.Dlog(paraObj);\n-\n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n-\n-      });\n-\n-  }\n-\n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n-\n-      return documentId.replace(/,\\s*$/, '');\n-  }\n-\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1722154209918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,302 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+  initDrawingManager(map: GoogleMap) {\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [\n+                  google.maps.drawing.OverlayType.POLYGON,\n+              ],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+          }\n+      };\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          //Polygon Drawn\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n+  }\n+\n+  serviceCheckClick(serviceObj: Service, event: any) {\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+  }\n+\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+      docObj.isSelect = event.checked;\n+  }\n+\n+  getList() {\n+\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+          } else {\n+              this.serviceList = [];\n+          }\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n+  }\n+\n+  openSnackBar(message: string) {\n+      this.snackBar.open(message, \"ok\", {\n+          duration: 2000,\n+      });\n+  }\n+\n+  createZone() {\n+      if (this.zoneName == '') {\n+          this.openSnackBar(\"please enter zone name\");\n+          return;\n+      }\n+\n+      if (this.taxVal == '') {\n+          this.openSnackBar(\"please enter tax value\");\n+          return;\n+      }\n+\n+      if (this.polygon == null || this.polygon == undefined) {\n+          this.openSnackBar(\"please select zone area\");\n+          return;\n+      }\n+\n+      const dataObj = [];\n+\n+      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+          const serviceObj = this.serviceWisePriceDocument[i];\n+\n+          if (serviceObj.base_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_km_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_minute_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+              return;\n+          }\n+\n+          if (serviceObj.booking_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_fair == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_km == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+              return;\n+          }\n+\n+          if (serviceObj.cancel_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+              return;\n+          }\n+\n+          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+          const data = Object.assign({}, serviceObj);\n+          data['document_array'] = [];\n+          data['car_document_array'] = [];\n+          dataObj.push(data);\n+      }\n+\n+      const polygonBounds = this.polygon.getPath();\n+      this.subArray = [];\n+\n+      polygonBounds.forEach((polygonLatlong: any) => {\n+          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+      });\n+\n+      const paraObj = {\n+          \"zone_name\": this.zoneName,\n+          \"city\": this.cityName,\n+          \"zone_json\": JSON.stringify(this.subArray),\n+          \"price_json\": JSON.stringify(dataObj),\n+          \"tax\": this.taxVal.toString(),\n+      }\n+\n+      Common.Dlog(paraObj);\n+\n+      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.zoneName = '';\n+              this.cityName = '';\n+              this.taxVal = '';\n+              this.serviceWisePriceDocumentAll = [];\n+              this.serviceWisePriceDocument = [];\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              })\n+              this.shapes = [];\n+              this.polygon = null;\n+              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+          }\n+          this.openSnackBar(responseObj.message)\n+\n+      });\n+\n+  }\n+\n+  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+      docArr.forEach(item => {\n+          if (item.isSelect == true) {\n+              documentId = documentId + item.doc_id.toString() + ',';\n+          }\n+      });\n+\n+      return documentId.replace(/,\\s*$/, '');\n+  }\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722154261732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,306 +299,4 @@\n \n \n \n }\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-  initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n-  }\n-\n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n-\n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n-\n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n-      }\n-\n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n-\n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n-      }\n-\n-      const dataObj = [];\n-\n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n-\n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n-\n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n-\n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n-\n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n-\n-      const polygonBounds = this.polygon.getPath();\n-      this.subArray = [];\n-\n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-      });\n-\n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n-\n-      Common.Dlog(paraObj);\n-\n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n-\n-      });\n-\n-  }\n-\n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n-\n-      return documentId.replace(/,\\s*$/, '');\n-  }\n-\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1722154833497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,23 +8,25 @@\n import { Common } from '../../common';\n import { MatSnackBar } from '@angular/material/snack-bar';\n import { Document } from '../../model/document';\n import { ZoneAdd } from '../../model/zone-add';\n+import { MatCheckboxChange } from '@angular/material/checkbox';\n \n-\n @Component({\n   selector: 'app-zone-add',\n   templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n+  styleUrls: ['./zone-add.component.css']\n })\n \n export class ZoneAddComponent implements OnInit {\n+createZone() {\n+throw new Error('Method not implemented.');\n+}\n+serviceDocumentCheckedClick(_t223: any,_t232: any,$event: MatCheckboxChange) {\n+throw new Error('Method not implemented.');\n+}\n \n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n+  @ViewChild(GoogleMap, { static: false }) map: GoogleMap | undefined;\n \n   apiLoaded: Observable<boolean>;\n   drawingManager: any;\n \n@@ -33,10 +35,10 @@\n   shapes: Array<any> = [];\n   polygon: any;\n \n   options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n+    zoom: 14,\n+    disableDefaultUI: true\n   };\n \n   zoneName = '';\n   cityName = '';\n@@ -50,253 +52,99 @@\n \n   dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n \n   displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+    'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n \n   constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n \n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n+    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+      .pipe(\n+        map(() => true),\n+        catchError(() => of(false))\n+      );\n   }\n+\n   ngOnInit(): void {\n-      this.getList();\n+    this.getList();\n   }\n+    getList() {\n+        throw new Error('Method not implemented.');\n+    }\n \n-  initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n+  ngAfterViewInit(): void {\n+    if (this.map) {\n+      this.initDrawingManager(this.map);\n+    } else {\n+      console.error('map is undefined');\n+    }\n   }\n \n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n+  initDrawingManager(map: GoogleMap) {\n+    if (!map) {\n+      console.error('map is undefined');\n+      return;\n+    }\n \n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n-\n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n+    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+      drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+      drawingControl: true,\n+      drawingControlOptions: {\n+        position: google.maps.ControlPosition.TOP_CENTER,\n+        drawingModes: [\n+          google.maps.drawing.OverlayType.POLYGON,\n+        ],\n+      },\n+      polygonOptions: {\n+        strokeColor: '#00ff00',\n       }\n+    };\n \n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n+    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+    if (this.drawingManager) {\n+      this.drawingManager.setMap(map.googleMap);\n+    } else {\n+      console.error('drawingManager is undefined');\n+    }\n \n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n+    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+      //Polygon Drawn\n+      if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+        const newShape = event.overlay;\n+        newShape.type = event.type;\n+        this.shapes.push(newShape);\n+        if (this.drawingManager.getDrawingMode()) {\n+          this.drawingManager.setDrawingMode(null);\n+        }\n       }\n+    });\n \n-      const dataObj = [];\n-\n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n-\n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n-\n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n-\n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n-\n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n-\n-      const polygonBounds = this.polygon.getPath();\n+    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+      Common.Dlog(\"polygoncomplete\");\n+      this.polygon = polygon;\n+      polygon.setEditable(true);\n+      const polygonBounds = polygon.getPath();\n       this.subArray = [];\n+      polygonBounds.forEach((polygonLatLong: any) => {\n+        Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+        this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n \n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n       });\n+      Common.Dlog(JSON.stringify(this.subArray));\n+    });\n \n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n+    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+      Common.Dlog(\"drawingmode_changed\");\n+      if (this.drawingManager.getDrawingMode() != null) {\n \n-      Common.Dlog(paraObj);\n+        this.shapes.forEach(shape => {\n+          shape.setMap(null);\n+        });\n \n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n-\n-      });\n-\n+        this.shapes = [];\n+        this.polygon = null;\n+      }\n+    });\n   }\n \n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n-\n-      return documentId.replace(/,\\s*$/, '');\n-  }\n-\n-\n-\n-\n-}\n+  serviceCheckClick(serviceObj: Service, event: any) {\n+    serviceObj.isSelect}}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722154902869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,25 +8,23 @@\n import { Common } from '../../common';\n import { MatSnackBar } from '@angular/material/snack-bar';\n import { Document } from '../../model/document';\n import { ZoneAdd } from '../../model/zone-add';\n-import { MatCheckboxChange } from '@angular/material/checkbox';\n \n+\n @Component({\n   selector: 'app-zone-add',\n   templateUrl: './zone-add.component.html',\n-  styleUrls: ['./zone-add.component.css']\n+  styleUrl: './zone-add.component.css'\n })\n \n export class ZoneAddComponent implements OnInit {\n-createZone() {\n-throw new Error('Method not implemented.');\n-}\n-serviceDocumentCheckedClick(_t223: any,_t232: any,$event: MatCheckboxChange) {\n-throw new Error('Method not implemented.');\n-}\n \n-  @ViewChild(GoogleMap, { static: false }) map: GoogleMap | undefined;\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n \n   apiLoaded: Observable<boolean>;\n   drawingManager: any;\n \n@@ -35,10 +33,10 @@\n   shapes: Array<any> = [];\n   polygon: any;\n \n   options: google.maps.MapOptions = {\n-    zoom: 14,\n-    disableDefaultUI: true\n+      zoom: 14,\n+      disableDefaultUI: true\n   };\n \n   zoneName = '';\n   cityName = '';\n@@ -52,99 +50,253 @@\n \n   dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n \n   displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-    'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n \n   constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n \n-    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-      .pipe(\n-        map(() => true),\n-        catchError(() => of(false))\n-      );\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n   }\n-\n   ngOnInit(): void {\n-    this.getList();\n+      this.getList();\n   }\n-    getList() {\n-        throw new Error('Method not implemented.');\n-    }\n \n-  ngAfterViewInit(): void {\n-    if (this.map) {\n-      this.initDrawingManager(this.map);\n-    } else {\n-      console.error('map is undefined');\n-    }\n+  initDrawingManager(map: GoogleMap) {\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [\n+                  google.maps.drawing.OverlayType.POLYGON,\n+              ],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+          }\n+      };\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          //Polygon Drawn\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n   }\n \n-  initDrawingManager(map: GoogleMap) {\n-    if (!map) {\n-      console.error('map is undefined');\n-      return;\n-    }\n+  serviceCheckClick(serviceObj: Service, event: any) {\n\\ No newline at end of file\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+  }\n \n-    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-      drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-      drawingControl: true,\n-      drawingControlOptions: {\n-        position: google.maps.ControlPosition.TOP_CENTER,\n-        drawingModes: [\n-          google.maps.drawing.OverlayType.POLYGON,\n-        ],\n-      },\n-      polygonOptions: {\n-        strokeColor: '#00ff00',\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+      docObj.isSelect = event.checked;\n+  }\n+\n+  getList() {\n+\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+          } else {\n+              this.serviceList = [];\n+          }\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n+  }\n+\n+  openSnackBar(message: string) {\n+      this.snackBar.open(message, \"ok\", {\n+          duration: 2000,\n+      });\n+  }\n+\n+  createZone() {\n+      if (this.zoneName == '') {\n+          this.openSnackBar(\"please enter zone name\");\n+          return;\n       }\n-    };\n \n-    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-    if (this.drawingManager) {\n-      this.drawingManager.setMap(map.googleMap);\n-    } else {\n-      console.error('drawingManager is undefined');\n-    }\n+      if (this.taxVal == '') {\n+          this.openSnackBar(\"please enter tax value\");\n+          return;\n+      }\n \n-    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-      //Polygon Drawn\n-      if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-        const newShape = event.overlay;\n-        newShape.type = event.type;\n-        this.shapes.push(newShape);\n-        if (this.drawingManager.getDrawingMode()) {\n-          this.drawingManager.setDrawingMode(null);\n-        }\n+      if (this.polygon == null || this.polygon == undefined) {\n+          this.openSnackBar(\"please select zone area\");\n+          return;\n       }\n-    });\n \n-    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-      Common.Dlog(\"polygoncomplete\");\n-      this.polygon = polygon;\n-      polygon.setEditable(true);\n-      const polygonBounds = polygon.getPath();\n+      const dataObj = [];\n+\n+      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+          const serviceObj = this.serviceWisePriceDocument[i];\n+\n+          if (serviceObj.base_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_km_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_minute_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+              return;\n+          }\n+\n+          if (serviceObj.booking_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_fair == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_km == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+              return;\n+          }\n+\n+          if (serviceObj.cancel_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+              return;\n+          }\n+\n+          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+          const data = Object.assign({}, serviceObj);\n+          data['document_array'] = [];\n+          data['car_document_array'] = [];\n+          dataObj.push(data);\n+      }\n+\n+      const polygonBounds = this.polygon.getPath();\n       this.subArray = [];\n-      polygonBounds.forEach((polygonLatLong: any) => {\n-        Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-        this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n \n+      polygonBounds.forEach((polygonLatlong: any) => {\n+          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n       });\n-      Common.Dlog(JSON.stringify(this.subArray));\n-    });\n \n-    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-      Common.Dlog(\"drawingmode_changed\");\n-      if (this.drawingManager.getDrawingMode() != null) {\n+      const paraObj = {\n+          \"zone_name\": this.zoneName,\n+          \"city\": this.cityName,\n+          \"zone_json\": JSON.stringify(this.subArray),\n+          \"price_json\": JSON.stringify(dataObj),\n+          \"tax\": this.taxVal.toString(),\n+      }\n \n-        this.shapes.forEach(shape => {\n-          shape.setMap(null);\n-        });\n+      Common.Dlog(paraObj);\n \n-        this.shapes = [];\n-        this.polygon = null;\n-      }\n-    });\n+      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.zoneName = '';\n+              this.cityName = '';\n+              this.taxVal = '';\n+              this.serviceWisePriceDocumentAll = [];\n+              this.serviceWisePriceDocument = [];\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              })\n+              this.shapes = [];\n+              this.polygon = null;\n+              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+          }\n+          this.openSnackBar(responseObj.message)\n+\n+      });\n+\n   }\n \n-  serviceCheckClick(serviceObj: Service, event: any) {\n-    serviceObj.isSelect}}\n+  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+      docArr.forEach(item => {\n+          if (item.isSelect == true) {\n+              documentId = documentId + item.doc_id.toString() + ',';\n+          }\n+      });\n+\n+      return documentId.replace(/,\\s*$/, '');\n+  }\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722155034427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,5 +298,5 @@\n \n \n \n \n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1722157447067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,541 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+\n+  initDrawingManager(map: GoogleMap) {\n+    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+        drawingControl: true,\n+        drawingControlOptions: {\n+            position: google.maps.ControlPosition.TOP_CENTER,\n+            drawingModes: [\n+                google.maps.drawing.OverlayType.POLYGON,\n+            ],\n+        },\n+        polygonOptions: {\n+            strokeColor: '#00ff00',\n+        }\n+    };\n+    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+    this.drawingManager.setMap(map.googleMap);\n+\n+\n+    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+        //Polygon Drawn\n+        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+            const newShape = event.overlay;\n+            newShape.type = event.type;\n+            this.shapes.push(newShape);\n+            if (this.drawingManager.getDrawingMode()) {\n+                this.drawingManager.setDrawingMode(null);\n+            }\n+        }\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+        Common.Dlog(\"polygoncomplete\");\n+        this.polygon = polygon;\n+        polygon.setEditable(true);\n+        const polygonBounds = polygon.getPath();\n+        this.subArray = [];\n+        polygonBounds.forEach((polygonLatLong: any) => {\n+            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+        });\n+        Common.Dlog(JSON.stringify(this.subArray));\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+        Common.Dlog(\"drawingmode_changed\");\n+        if (this.drawingManager.getDrawingMode() != null) {\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            });\n+\n+            this.shapes = [];\n+            this.polygon = null;\n+        }\n+    });\n+}\n+\n+serviceCheckClick(serviceObj: Service, event: any) {\n+    serviceObj.isSelect = event.checked;\n+    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+}\n+\n+serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+    docObj.isSelect = event.checked;\n+}\n+\n+getList() {\n+\n+    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.serviceList = responseObj.payload.service;\n+\n+            responseObj.payload.document.forEach((docObj: Document) => {\n+                docObj.isSelect = false;\n+                if (docObj.type == 1) {\n+                    this.documentList.push(docObj);\n+                } else {\n+                    this.carDocumentList.push(docObj);\n+                }\n+            });\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+        } else {\n+            this.serviceList = [];\n+        }\n+        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+    });\n+}\n+\n+openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+        duration: 2000,\n+    });\n+}\n+\n+createZone() {\n+    if (this.zoneName == '') {\n+        this.openSnackBar(\"please enter zone name\");\n+        return;\n+    }\n+\n+    if (this.taxVal == '') {\n+        this.openSnackBar(\"please enter tax value\");\n+        return;\n+    }\n+\n+    if (this.polygon == null || this.polygon == undefined) {\n+        this.openSnackBar(\"please select zone area\");\n+        return;\n+    }\n+\n+    const dataObj = [];\n+\n+    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+        const serviceObj = this.serviceWisePriceDocument[i];\n+\n+        if (serviceObj.base_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_km_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_minute_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+            return;\n+        }\n+\n+        if (serviceObj.booking_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_fair == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_km == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+            return;\n+        }\n+\n+        if (serviceObj.cancel_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+            return;\n+        }\n+\n+        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+        const data = Object.assign({}, serviceObj);\n+        data['document_array'] = [];\n+        data['car_document_array'] = [];\n+        dataObj.push(data);\n+    }\n+\n+    const polygonBounds = this.polygon.getPath();\n+    this.subArray = [];\n+\n+    polygonBounds.forEach((polygonLatlong: any) => {\n+        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+    });\n+\n+    const paraObj = {\n+        \"zone_name\": this.zoneName,\n+        \"city\": this.cityName,\n+        \"zone_json\": JSON.stringify(this.subArray),\n+        \"price_json\": JSON.stringify(dataObj),\n+        \"tax\": this.taxVal.toString(),\n+    }\n+\n+    Common.Dlog(paraObj);\n+\n+    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.zoneName = '';\n+            this.cityName = '';\n+            this.taxVal = '';\n+            this.serviceWisePriceDocumentAll = [];\n+            this.serviceWisePriceDocument = [];\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            })\n+            this.shapes = [];\n+            this.polygon = null;\n+            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+        }\n+        this.openSnackBar(responseObj.message)\n+\n+    });\n+\n+}\n+\n+getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+    docArr.forEach(item => {\n+        if (item.isSelect == true) {\n+            documentId = documentId + item.doc_id.toString() + ',';\n+        }\n+    });\n+\n+    return documentId.replace(/,\\s*$/, '');\n+}\n+\n+\n+\n+\n+}\n+\n+\n+\n+  /*initDrawingManager(map: GoogleMap) {\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [\n+                  google.maps.drawing.OverlayType.POLYGON,\n+              ],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+          }\n+      };\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          //Polygon Drawn\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n+  }\n+\n+  serviceCheckClick(serviceObj: Service, event: any) {\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+  }\n+\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+      docObj.isSelect = event.checked;\n+  }\n+\n+  getList() {\n+\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+          } else {\n+              this.serviceList = [];\n+          }\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n+  }\n+\n+  openSnackBar(message: string) {\n+      this.snackBar.open(message, \"ok\", {\n+          duration: 2000,\n+      });\n+  }\n+\n+  createZone() {\n+      if (this.zoneName == '') {\n+          this.openSnackBar(\"please enter zone name\");\n+          return;\n+      }\n+\n+      if (this.taxVal == '') {\n+          this.openSnackBar(\"please enter tax value\");\n+          return;\n+      }\n+\n+      if (this.polygon == null || this.polygon == undefined) {\n+          this.openSnackBar(\"please select zone area\");\n+          return;\n+      }\n+\n+      const dataObj = [];\n+\n+      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+          const serviceObj = this.serviceWisePriceDocument[i];\n+\n+          if (serviceObj.base_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_km_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+              return;\n+          }\n+\n+          if (serviceObj.per_minute_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+              return;\n+          }\n+\n+          if (serviceObj.booking_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_fair == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+              return;\n+          }\n+\n+          if (serviceObj.minimum_km == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+              return;\n+          }\n+\n+          if (serviceObj.cancel_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+              return;\n+          }\n+\n+          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+          const data = Object.assign({}, serviceObj);\n+          data['document_array'] = [];\n+          data['car_document_array'] = [];\n+          dataObj.push(data);\n+      }\n+\n+      const polygonBounds = this.polygon.getPath();\n+      this.subArray = [];\n+\n+      polygonBounds.forEach((polygonLatlong: any) => {\n+          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+      });\n+\n+      const paraObj = {\n+          \"zone_name\": this.zoneName,\n+          \"city\": this.cityName,\n+          \"zone_json\": JSON.stringify(this.subArray),\n+          \"price_json\": JSON.stringify(dataObj),\n+          \"tax\": this.taxVal.toString(),\n+      }\n+\n+      Common.Dlog(paraObj);\n+\n+      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.zoneName = '';\n+              this.cityName = '';\n+              this.taxVal = '';\n+              this.serviceWisePriceDocumentAll = [];\n+              this.serviceWisePriceDocument = [];\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              })\n+              this.shapes = [];\n+              this.polygon = null;\n+              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+          }\n+          this.openSnackBar(responseObj.message)\n+\n+      });\n+\n+  }\n+\n+  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+      docArr.forEach(item => {\n+          if (item.isSelect == true) {\n+              documentId = documentId + item.doc_id.toString() + ',';\n+          }\n+      });\n+\n+      return documentId.replace(/,\\s*$/, '');\n+  }\n+\n+\n+\n+\n+}*/\n"
                },
                {
                    "date": 1722158488147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,34 +9,32 @@\n import { MatSnackBar } from '@angular/material/snack-bar';\n import { Document } from '../../model/document';\n import { ZoneAdd } from '../../model/zone-add';\n \n-\n @Component({\n   selector: 'app-zone-add',\n   templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n+  styleUrls: ['./zone-add.component.css'] // Corrected property name\n })\n-\n export class ZoneAddComponent implements OnInit {\n \n   @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n+    if (m) {\n+      this.initDrawingManager(m);\n+    }\n   }\n \n   apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n+  drawingManager!: google.maps.drawing.DrawingManager; // Specify the type\n \n   polygons: Array<any> = [];\n   subArray: Array<any> = [];\n   shapes: Array<any> = [];\n   polygon: any;\n \n   options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n+    zoom: 14,\n+    disableDefaultUI: true\n   };\n \n   zoneName = '';\n   cityName = '';\n@@ -50,794 +48,242 @@\n \n   dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n \n   displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+    'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n \n   constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing', 'callback')\n+      .pipe(\n+        map(() => true),\n+        catchError(() => of(false))\n+      );\n+  }\n \n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n   ngOnInit(): void {\n-      this.getList();\n+    this.getList();\n   }\n \n-\n   initDrawingManager(map: GoogleMap) {\n     const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-        drawingControl: true,\n-        drawingControlOptions: {\n-            position: google.maps.ControlPosition.TOP_CENTER,\n-            drawingModes: [\n-                google.maps.drawing.OverlayType.POLYGON,\n-            ],\n-        },\n-        polygonOptions: {\n-            strokeColor: '#00ff00',\n-        }\n+      drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+      drawingControl: true,\n+      drawingControlOptions: {\n+        position: google.maps.ControlPosition.TOP_CENTER,\n+        drawingModes: [\n+          google.maps.drawing.OverlayType.POLYGON,\n+        ],\n+      },\n+      polygonOptions: {\n+        strokeColor: '#00ff00',\n+      }\n     };\n     this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-    this.drawingManager.setMap(map.googleMap);\n-\n-\n+  \n+    // Ensure map.googleMap is either a Map or null\n+    const googleMapInstance = map.googleMap || null;\n+    this.drawingManager.setMap(googleMapInstance);\n+  \n     google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-        //Polygon Drawn\n-        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-            const newShape = event.overlay;\n-            newShape.type = event.type;\n-            this.shapes.push(newShape);\n-            if (this.drawingManager.getDrawingMode()) {\n-                this.drawingManager.setDrawingMode(null);\n-            }\n+      // Polygon Drawn\n+      if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+        const newShape = event.overlay;\n+        newShape.type = event.type;\n+        this.shapes.push(newShape);\n+        if (this.drawingManager.getDrawingMode()) {\n+          this.drawingManager.setDrawingMode(null);\n         }\n+      }\n     });\n-\n+  \n     google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-        Common.Dlog(\"polygoncomplete\");\n-        this.polygon = polygon;\n-        polygon.setEditable(true);\n-        const polygonBounds = polygon.getPath();\n-        this.subArray = [];\n-        polygonBounds.forEach((polygonLatLong: any) => {\n-            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-        });\n-        Common.Dlog(JSON.stringify(this.subArray));\n+      Common.Dlog(\"polygoncomplete\");\n+      this.polygon = polygon;\n+      polygon.setEditable(true);\n+      const polygonBounds = polygon.getPath();\n+      this.subArray = [];\n+      polygonBounds.forEach((polygonLatLong: any) => {\n+        Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+        this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+      });\n+      Common.Dlog(JSON.stringify(this.subArray));\n     });\n-\n+  \n     google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-        Common.Dlog(\"drawingmode_changed\");\n-        if (this.drawingManager.getDrawingMode() != null) {\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            });\n-\n-            this.shapes = [];\n-            this.polygon = null;\n-        }\n+      Common.Dlog(\"drawingmode_changed\");\n+      if (this.drawingManager.getDrawingMode() != null) {\n+        this.shapes.forEach(shape => {\n+          shape.setMap(null);\n+        });\n+        this.shapes = [];\n+        this.polygon = null;\n+      }\n     });\n-}\n+  }\n+  \n \n-serviceCheckClick(serviceObj: Service, event: any) {\n+  serviceCheckClick(serviceObj: Service, event: any) {\n     serviceObj.isSelect = event.checked;\n     this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n     this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n     this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-}\n+  }\n \n-serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n     docObj.isSelect = event.checked;\n-}\n+  }\n \n-getList() {\n-\n+  getList() {\n     this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+      Common.Dlog(responseObj);\n+      if (responseObj.status == 1) {\n+        this.serviceList = responseObj.payload.service;\n \n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.serviceList = responseObj.payload.service;\n+        responseObj.payload.document.forEach((docObj: Document) => {\n+          docObj.isSelect = false;\n+          if (docObj.type == 1) {\n+            this.documentList.push(docObj);\n+          } else {\n+            this.carDocumentList.push(docObj);\n+          }\n+        });\n \n-            responseObj.payload.document.forEach((docObj: Document) => {\n-                docObj.isSelect = false;\n-                if (docObj.type == 1) {\n-                    this.documentList.push(docObj);\n-                } else {\n-                    this.carDocumentList.push(docObj);\n-                }\n-            });\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-        } else {\n-            this.serviceList = [];\n-        }\n-        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+        this.serviceList.forEach(serviceObj => {\n+          const priceObj = new ZoneAdd();\n+          priceObj.service_id = serviceObj.service_id;\n+          priceObj.service_name = serviceObj.service_name;\n+          priceObj.document_array = this.documentList;\n+          priceObj.car_document_array = this.carDocumentList;\n+          this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+        });\n+      } else {\n+        this.serviceList = [];\n+      }\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n     });\n-}\n+  }\n \n-openSnackBar(message: string) {\n+  openSnackBar(message: string) {\n     this.snackBar.open(message, \"ok\", {\n-        duration: 2000,\n+      duration: 2000,\n     });\n-}\n+  }\n \n-createZone() {\n+  createZone() {\n     if (this.zoneName == '') {\n-        this.openSnackBar(\"please enter zone name\");\n-        return;\n+      this.openSnackBar(\"please enter zone name\");\n+      return;\n     }\n \n     if (this.taxVal == '') {\n-        this.openSnackBar(\"please enter tax value\");\n-        return;\n+      this.openSnackBar(\"please enter tax value\");\n+      return;\n     }\n \n     if (this.polygon == null || this.polygon == undefined) {\n-        this.openSnackBar(\"please select zone area\");\n-        return;\n+      this.openSnackBar(\"please select zone area\");\n+      return;\n     }\n \n     const dataObj = [];\n \n     for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-        const serviceObj = this.serviceWisePriceDocument[i];\n+      const serviceObj = this.serviceWisePriceDocument[i];\n \n-        if (serviceObj.base_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-            return;\n-        }\n+      if (serviceObj.base_charge == '') {\n+        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+        return;\n+      }\n \n-        if (serviceObj.per_km_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-            return;\n-        }\n+      if (serviceObj.per_km_charge == '') {\n+        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+        return;\n+      }\n \n-        if (serviceObj.per_minute_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-            return;\n-        }\n+      if (serviceObj.per_minute_charge == '') {\n+        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+        return;\n+      }\n \n-        if (serviceObj.booking_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-            return;\n-        }\n+      if (serviceObj.booking_charge == '') {\n+        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+        return;\n+      }\n \n-        if (serviceObj.minimum_fair == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-            return;\n-        }\n+      if (serviceObj.minimum_fair == '') {\n+        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+        return;\n+      }\n \n-        if (serviceObj.minimum_km == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-            return;\n-        }\n+      if (serviceObj.minimum_km == '') {\n+        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+        return;\n+      }\n \n-        if (serviceObj.cancel_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-            return;\n-        }\n+      if (serviceObj.cancel_charge == '') {\n+        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+        return;\n+      }\n \n-        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-        const data = Object.assign({}, serviceObj);\n-        data['document_array'] = [];\n-        data['car_document_array'] = [];\n-        dataObj.push(data);\n+      serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+      serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+      const data = Object.assign({}, serviceObj);\n+      data['document_array'] = [];\n+      data['car_document_array'] = [];\n+      dataObj.push(data);\n     }\n \n     const polygonBounds = this.polygon.getPath();\n     this.subArray = [];\n \n     polygonBounds.forEach((polygonLatlong: any) => {\n-        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+      this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n     });\n \n     const paraObj = {\n-        \"zone_name\": this.zoneName,\n-        \"city\": this.cityName,\n-        \"zone_json\": JSON.stringify(this.subArray),\n-        \"price_json\": JSON.stringify(dataObj),\n-        \"tax\": this.taxVal.toString(),\n+      \"zone_name\": this.zoneName,\n+      \"city\": this.cityName,\n+      \"zone_json\": JSON.stringify(this.subArray),\n+      \"price_json\": JSON.stringify(dataObj),\n+      \"tax\": this.taxVal.toString(),\n     }\n \n     Common.Dlog(paraObj);\n \n     this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+      Common.Dlog(responseObj);\n+      if (responseObj.status == 1) {\n+        this.zoneName = '';\n+        this.cityName = '';\n+        this.taxVal = '';\n+        this.serviceWisePriceDocumentAll = [];\n+        this.serviceWisePriceDocument = [];\n \n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.zoneName = '';\n-            this.cityName = '';\n-            this.taxVal = '';\n-            this.serviceWisePriceDocumentAll = [];\n-            this.serviceWisePriceDocument = [];\n+        this.serviceList.forEach(serviceObj => {\n+          const priceObj = new ZoneAdd();\n+          priceObj.service_id = serviceObj.service_id;\n+          priceObj.service_name = serviceObj.service_name;\n+          priceObj.document_array = this.documentList;\n+          priceObj.car_document_array = this.carDocumentList;\n+          this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+        });\n \n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            })\n-            this.shapes = [];\n-            this.polygon = null;\n-            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-        }\n-        this.openSnackBar(responseObj.message)\n-\n+        this.shapes.forEach(shape => {\n+          shape.setMap(null);\n+        })\n+        this.shapes = [];\n+        this.polygon = null;\n+        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      }\n+      this.openSnackBar(responseObj.message)\n     });\n+  }\n \n-}\n-\n-getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n     docArr.forEach(item => {\n-        if (item.isSelect == true) {\n-            documentId = documentId + item.doc_id.toString() + ',';\n-        }\n+      if (item.isSelect == true) {\n+        documentId = documentId + item.doc_id.toString() + ',';\n+      }\n     });\n-\n     return documentId.replace(/,\\s*$/, '');\n-}\n-\n-\n-\n-\n-}\n-\n-\n-\n-  /*initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n   }\n-\n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n-\n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n-\n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n-      }\n-\n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n-\n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n-      }\n-\n-      const dataObj = [];\n-\n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n-\n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n-\n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n-\n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n-\n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n-\n-      const polygonBounds = this.polygon.getPath();\n-      this.subArray = [];\n-\n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-      });\n-\n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n-\n-      Common.Dlog(paraObj);\n-\n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n-\n-      });\n-\n-  }\n-\n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n-\n-      return documentId.replace(/,\\s*$/, '');\n-  }\n-\n-\n-\n-\n-}*/\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-  initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n-  }\n-\n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n-\n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n-\n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n-      }\n-\n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n-\n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n-      }\n-\n-      const dataObj = [];\n-\n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n-\n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n-\n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n-\n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n-\n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n-\n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n-\n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n-\n-      const polygonBounds = this.polygon.getPath();\n-      this.subArray = [];\n-\n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-      });\n-\n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n-\n-      Common.Dlog(paraObj);\n-\n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-\n-\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n-\n-      });\n-\n-  }\n-\n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n-\n-      return documentId.replace(/,\\s*$/, '');\n-  }\n-\n-\n-\n-\n }\n"
                },
                {
                    "date": 1722158618451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,32 +9,34 @@\n import { MatSnackBar } from '@angular/material/snack-bar';\n import { Document } from '../../model/document';\n import { ZoneAdd } from '../../model/zone-add';\n \n+\n @Component({\n   selector: 'app-zone-add',\n   templateUrl: './zone-add.component.html',\n-  styleUrls: ['./zone-add.component.css'] // Corrected property name\n+  styleUrl: './zone-add.component.css'\n })\n+\n export class ZoneAddComponent implements OnInit {\n \n   @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-    if (m) {\n-      this.initDrawingManager(m);\n-    }\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n   }\n \n   apiLoaded: Observable<boolean>;\n-  drawingManager!: google.maps.drawing.DrawingManager; // Specify the type\n+  drawingManager: any;\n \n   polygons: Array<any> = [];\n   subArray: Array<any> = [];\n   shapes: Array<any> = [];\n   polygon: any;\n \n   options: google.maps.MapOptions = {\n-    zoom: 14,\n-    disableDefaultUI: true\n+      zoom: 14,\n+      disableDefaultUI: true\n   };\n \n   zoneName = '';\n   cityName = '';\n@@ -48,242 +50,258 @@\n \n   dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n \n   displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-    'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n \n   constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing', 'callback')\n-      .pipe(\n-        map(() => true),\n-        catchError(() => of(false))\n-      );\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n   }\n-\n   ngOnInit(): void {\n-    this.getList();\n+      this.getList();\n   }\n \n+\n+\n+\n+\n+\n   initDrawingManager(map: GoogleMap) {\n-    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-      drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-      drawingControl: true,\n-      drawingControlOptions: {\n-        position: google.maps.ControlPosition.TOP_CENTER,\n-        drawingModes: [\n-          google.maps.drawing.OverlayType.POLYGON,\n-        ],\n-      },\n-      polygonOptions: {\n-        strokeColor: '#00ff00',\n-      }\n-    };\n-    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-  \n-    // Ensure map.googleMap is either a Map or null\n-    const googleMapInstance = map.googleMap || null;\n-    this.drawingManager.setMap(googleMapInstance);\n-  \n-    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-      // Polygon Drawn\n-      if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-        const newShape = event.overlay;\n-        newShape.type = event.type;\n-        this.shapes.push(newShape);\n-        if (this.drawingManager.getDrawingMode()) {\n-          this.drawingManager.setDrawingMode(null);\n-        }\n-      }\n-    });\n-  \n-    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-      Common.Dlog(\"polygoncomplete\");\n-      this.polygon = polygon;\n-      polygon.setEditable(true);\n-      const polygonBounds = polygon.getPath();\n-      this.subArray = [];\n-      polygonBounds.forEach((polygonLatLong: any) => {\n-        Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-        this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [\n+                  google.maps.drawing.OverlayType.POLYGON,\n+              ],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+          }\n+      };\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          //Polygon Drawn\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n       });\n-      Common.Dlog(JSON.stringify(this.subArray));\n-    });\n-  \n-    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-      Common.Dlog(\"drawingmode_changed\");\n-      if (this.drawingManager.getDrawingMode() != null) {\n-        this.shapes.forEach(shape => {\n-          shape.setMap(null);\n-        });\n-        this.shapes = [];\n-        this.polygon = null;\n-      }\n-    });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n   }\n-  \n \n   serviceCheckClick(serviceObj: Service, event: any) {\n-    serviceObj.isSelect = event.checked;\n-    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n   }\n \n   serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-    docObj.isSelect = event.checked;\n+      docObj.isSelect = event.checked;\n   }\n \n   getList() {\n-    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-      Common.Dlog(responseObj);\n-      if (responseObj.status == 1) {\n-        this.serviceList = responseObj.payload.service;\n \n-        responseObj.payload.document.forEach((docObj: Document) => {\n-          docObj.isSelect = false;\n-          if (docObj.type == 1) {\n-            this.documentList.push(docObj);\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n           } else {\n-            this.carDocumentList.push(docObj);\n+              this.serviceList = [];\n           }\n-        });\n-\n-        this.serviceList.forEach(serviceObj => {\n-          const priceObj = new ZoneAdd();\n-          priceObj.service_id = serviceObj.service_id;\n-          priceObj.service_name = serviceObj.service_name;\n-          priceObj.document_array = this.documentList;\n-          priceObj.car_document_array = this.carDocumentList;\n-          this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-        });\n-      } else {\n-        this.serviceList = [];\n-      }\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-    });\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n   }\n \n   openSnackBar(message: string) {\n-    this.snackBar.open(message, \"ok\", {\n-      duration: 2000,\n-    });\n+      this.snackBar.open(message, \"ok\", {\n+          duration: 2000,\n+      });\n   }\n \n   createZone() {\n-    if (this.zoneName == '') {\n-      this.openSnackBar(\"please enter zone name\");\n-      return;\n-    }\n+      if (this.zoneName == '') {\n+          this.openSnackBar(\"please enter zone name\");\n+          return;\n+      }\n \n-    if (this.taxVal == '') {\n-      this.openSnackBar(\"please enter tax value\");\n-      return;\n-    }\n+      if (this.taxVal == '') {\n+          this.openSnackBar(\"please enter tax value\");\n+          return;\n+      }\n \n-    if (this.polygon == null || this.polygon == undefined) {\n-      this.openSnackBar(\"please select zone area\");\n-      return;\n-    }\n+      if (this.polygon == null || this.polygon == undefined) {\n+          this.openSnackBar(\"please select zone area\");\n+          return;\n+      }\n \n-    const dataObj = [];\n+      const dataObj = [];\n \n-    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-      const serviceObj = this.serviceWisePriceDocument[i];\n+      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+          const serviceObj = this.serviceWisePriceDocument[i];\n \n-      if (serviceObj.base_charge == '') {\n-        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-        return;\n-      }\n+          if (serviceObj.base_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+              return;\n+          }\n \n-      if (serviceObj.per_km_charge == '') {\n-        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-        return;\n-      }\n+          if (serviceObj.per_km_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+              return;\n+          }\n \n-      if (serviceObj.per_minute_charge == '') {\n-        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-        return;\n-      }\n+          if (serviceObj.per_minute_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+              return;\n+          }\n \n-      if (serviceObj.booking_charge == '') {\n-        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-        return;\n-      }\n+          if (serviceObj.booking_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+              return;\n+          }\n \n-      if (serviceObj.minimum_fair == '') {\n-        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-        return;\n-      }\n+          if (serviceObj.minimum_fair == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+              return;\n+          }\n \n-      if (serviceObj.minimum_km == '') {\n-        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-        return;\n+          if (serviceObj.minimum_km == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+              return;\n+          }\n+\n+          if (serviceObj.cancel_charge == '') {\n+              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+              return;\n+          }\n+\n+          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+          const data = Object.assign({}, serviceObj);\n+          data['document_array'] = [];\n+          data['car_document_array'] = [];\n+          dataObj.push(data);\n       }\n \n-      if (serviceObj.cancel_charge == '') {\n-        this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-        return;\n+      const polygonBounds = this.polygon.getPath();\n+      this.subArray = [];\n+\n+      polygonBounds.forEach((polygonLatlong: any) => {\n+          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+      });\n+\n+      const paraObj = {\n+          \"zone_name\": this.zoneName,\n+          \"city\": this.cityName,\n+          \"zone_json\": JSON.stringify(this.subArray),\n+          \"price_json\": JSON.stringify(dataObj),\n+          \"tax\": this.taxVal.toString(),\n       }\n \n-      serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-      serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-      const data = Object.assign({}, serviceObj);\n-      data['document_array'] = [];\n-      data['car_document_array'] = [];\n-      dataObj.push(data);\n-    }\n+      Common.Dlog(paraObj);\n \n-    const polygonBounds = this.polygon.getPath();\n-    this.subArray = [];\n+      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n \n-    polygonBounds.forEach((polygonLatlong: any) => {\n-      this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-    });\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.zoneName = '';\n+              this.cityName = '';\n+              this.taxVal = '';\n+              this.serviceWisePriceDocumentAll = [];\n+              this.serviceWisePriceDocument = [];\n \n-    const paraObj = {\n-      \"zone_name\": this.zoneName,\n-      \"city\": this.cityName,\n-      \"zone_json\": JSON.stringify(this.subArray),\n-      \"price_json\": JSON.stringify(dataObj),\n-      \"tax\": this.taxVal.toString(),\n-    }\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n \n-    Common.Dlog(paraObj);\n \n-    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-      Common.Dlog(responseObj);\n-      if (responseObj.status == 1) {\n-        this.zoneName = '';\n-        this.cityName = '';\n-        this.taxVal = '';\n-        this.serviceWisePriceDocumentAll = [];\n-        this.serviceWisePriceDocument = [];\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              })\n+              this.shapes = [];\n+              this.polygon = null;\n+              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+          }\n+          this.openSnackBar(responseObj.message)\n \n-        this.serviceList.forEach(serviceObj => {\n-          const priceObj = new ZoneAdd();\n-          priceObj.service_id = serviceObj.service_id;\n-          priceObj.service_name = serviceObj.service_name;\n-          priceObj.document_array = this.documentList;\n-          priceObj.car_document_array = this.carDocumentList;\n-          this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-        });\n+      });\n \n-        this.shapes.forEach(shape => {\n-          shape.setMap(null);\n-        })\n-        this.shapes = [];\n-        this.polygon = null;\n-        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      }\n-      this.openSnackBar(responseObj.message)\n-    });\n   }\n \n   getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-    docArr.forEach(item => {\n-      if (item.isSelect == true) {\n-        documentId = documentId + item.doc_id.toString() + ',';\n-      }\n-    });\n-    return documentId.replace(/,\\s*$/, '');\n+      docArr.forEach(item => {\n+          if (item.isSelect == true) {\n+              documentId = documentId + item.doc_id.toString() + ',';\n+          }\n+      });\n+\n+      return documentId.replace(/,\\s*$/, '');\n   }\n+\n+\n+\n+\n }\n"
                },
                {
                    "date": 1722242924878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Component, OnInit, ViewChild } from '@angular/core';\n+/*import { Component, OnInit, ViewChild } from '@angular/core';\n import { GoogleMap } from '@angular/google-maps';\n import { Observable, catchError, map, of } from 'rxjs';\n import { Service } from '../../model/service';\n import { MatTableDataSource } from '@angular/material/table';\n@@ -303,5 +303,167 @@\n \n \n \n \n-}\n+}*/\n+\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrls: ['./zone-add.component.css']\n+})\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+  initDrawingManager(map: GoogleMap) {\n+      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+          drawingControl: true,\n+          drawingControlOptions: {\n+              position: google.maps.ControlPosition.TOP_CENTER,\n+              drawingModes: [google.maps.drawing.OverlayType.POLYGON],\n+          },\n+          polygonOptions: {\n+              strokeColor: '#00ff00',\n+              editable: true,\n+              draggable: true,\n+          }\n+      };\n+\n+      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+      this.drawingManager.setMap(map.googleMap);\n+\n+      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+              const newShape = event.overlay;\n+              newShape.type = event.type;\n+              this.shapes.push(newShape);\n+              if (this.drawingManager.getDrawingMode()) {\n+                  this.drawingManager.setDrawingMode(null);\n+              }\n+          }\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+          Common.Dlog(\"polygoncomplete\");\n+          this.polygon = polygon;\n+          polygon.setEditable(true);\n+          const polygonBounds = polygon.getPath();\n+          this.subArray = [];\n+          polygonBounds.forEach((polygonLatLong: any) => {\n+              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+          });\n+          Common.Dlog(JSON.stringify(this.subArray));\n+      });\n+\n+      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+          Common.Dlog(\"drawingmode_changed\");\n+          if (this.drawingManager.getDrawingMode() != null) {\n+              this.shapes.forEach(shape => {\n+                  shape.setMap(null);\n+              });\n+              this.shapes = [];\n+              this.polygon = null;\n+          }\n+      });\n+  }\n+\n+  serviceCheckClick(serviceObj: Service, event: any) {\n+      serviceObj.isSelect = event.checked;\n+      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+  }\n+\n+  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+      docObj.isSelect = event.checked;\n+  }\n+\n+  getList() {\n+      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+          Common.Dlog(responseObj);\n+          if (responseObj.status == 1) {\n+              this.serviceList = responseObj.payload.service;\n+              responseObj.payload.document.forEach((docObj: Document) => {\n+                  docObj.isSelect = false;\n+                  if (docObj.type == 1) {\n+                      this.documentList.push(docObj);\n+                  } else {\n+                      this.carDocumentList.push(docObj);\n+                  }\n+              });\n+\n+              this.serviceList.forEach(serviceObj => {\n+                  const priceObj = new ZoneAdd();\n+                  priceObj.service_id = serviceObj.service_id;\n+                  priceObj.service_name = serviceObj.service_name;\n+                  priceObj.document_array = this.documentList;\n+                  priceObj.car_document_array = this.carDocumentList;\n+                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+              });\n+          } else {\n+              this.serviceList = [];\n+          }\n+          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+      });\n+  }\n+\n+  openSnackBar(message: string) {\n+      this.snackBar.open\n"
                },
                {
                    "date": 1722242960385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-/*import { Component, OnInit, ViewChild } from '@angular/core';\n+import { Component, OnInit, ViewChild } from '@angular/core';\n import { GoogleMap } from '@angular/google-maps';\n import { Observable, catchError, map, of } from 'rxjs';\n import { Service } from '../../model/service';\n import { MatTableDataSource } from '@angular/material/table';\n@@ -303,167 +303,5 @@\n \n \n \n \n-}*/\n-\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrls: ['./zone-add.component.css']\n-})\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n-\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-  initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [google.maps.drawing.OverlayType.POLYGON],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-              editable: true,\n-              draggable: true,\n-          }\n-      };\n-\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n-\n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n-\n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n-  }\n-\n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n-\n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n-\n-  getList() {\n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n-\n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n-\n-  openSnackBar(message: string) {\n-      this.snackBar.open\n+}\n"
                },
                {
                    "date": 1722244011425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,237 +70,237 @@\n \n \n \n   initDrawingManager(map: GoogleMap) {\n-      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-          drawingControl: true,\n-          drawingControlOptions: {\n-              position: google.maps.ControlPosition.TOP_CENTER,\n-              drawingModes: [\n-                  google.maps.drawing.OverlayType.POLYGON,\n-              ],\n-          },\n-          polygonOptions: {\n-              strokeColor: '#00ff00',\n-          }\n-      };\n-      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-      this.drawingManager.setMap(map.googleMap);\n+    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+        drawingControl: true,\n+        drawingControlOptions: {\n+            position: google.maps.ControlPosition.TOP_CENTER,\n+            drawingModes: [\n+                google.maps.drawing.OverlayType.POLYGON,\n+            ],\n+        },\n+        polygonOptions: {\n+            strokeColor: '#00ff00',\n+        }\n+    };\n+    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+    this.drawingManager.setMap(map.googleMap);\n \n \n-      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-          //Polygon Drawn\n-          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-              const newShape = event.overlay;\n-              newShape.type = event.type;\n-              this.shapes.push(newShape);\n-              if (this.drawingManager.getDrawingMode()) {\n-                  this.drawingManager.setDrawingMode(null);\n-              }\n-          }\n-      });\n+    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+        //Polygon Drawn\n+        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+            const newShape = event.overlay;\n+            newShape.type = event.type;\n+            this.shapes.push(newShape);\n+            if (this.drawingManager.getDrawingMode()) {\n+                this.drawingManager.setDrawingMode(null);\n+            }\n+        }\n+    });\n \n-      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-          Common.Dlog(\"polygoncomplete\");\n-          this.polygon = polygon;\n-          polygon.setEditable(true);\n-          const polygonBounds = polygon.getPath();\n-          this.subArray = [];\n-          polygonBounds.forEach((polygonLatLong: any) => {\n-              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+        Common.Dlog(\"polygoncomplete\");\n+        this.polygon = polygon;\n+        polygon.setEditable(true);\n+        const polygonBounds = polygon.getPath();\n+        this.subArray = [];\n+        polygonBounds.forEach((polygonLatLong: any) => {\n+            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n \n-          });\n-          Common.Dlog(JSON.stringify(this.subArray));\n-      });\n+        });\n+        Common.Dlog(JSON.stringify(this.subArray));\n+    });\n \n-      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-          Common.Dlog(\"drawingmode_changed\");\n-          if (this.drawingManager.getDrawingMode() != null) {\n+    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+        Common.Dlog(\"drawingmode_changed\");\n+        if (this.drawingManager.getDrawingMode() != null) {\n \n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              });\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            });\n \n-              this.shapes = [];\n-              this.polygon = null;\n-          }\n-      });\n-  }\n+            this.shapes = [];\n+            this.polygon = null;\n+        }\n+    });\n+}\n \n-  serviceCheckClick(serviceObj: Service, event: any) {\n-      serviceObj.isSelect = event.checked;\n-      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-  }\n+serviceCheckClick(serviceObj: Service, event: any) {\n+    serviceObj.isSelect = event.checked;\n+    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+}\n \n-  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-      docObj.isSelect = event.checked;\n-  }\n+serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+    docObj.isSelect = event.checked;\n+}\n \n-  getList() {\n+getList() {\n \n-      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n \n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.serviceList = responseObj.payload.service;\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.serviceList = responseObj.payload.service;\n \n-              responseObj.payload.document.forEach((docObj: Document) => {\n-                  docObj.isSelect = false;\n-                  if (docObj.type == 1) {\n-                      this.documentList.push(docObj);\n-                  } else {\n-                      this.carDocumentList.push(docObj);\n-                  }\n-              });\n+            responseObj.payload.document.forEach((docObj: Document) => {\n+                docObj.isSelect = false;\n+                if (docObj.type == 1) {\n+                    this.documentList.push(docObj);\n+                } else {\n+                    this.carDocumentList.push(docObj);\n+                }\n+            });\n \n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n-          } else {\n-              this.serviceList = [];\n-          }\n-          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-      });\n-  }\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+        } else {\n+            this.serviceList = [];\n+        }\n+        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+    });\n+}\n \n-  openSnackBar(message: string) {\n-      this.snackBar.open(message, \"ok\", {\n-          duration: 2000,\n-      });\n-  }\n+openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+        duration: 2000,\n+    });\n+}\n \n-  createZone() {\n-      if (this.zoneName == '') {\n-          this.openSnackBar(\"please enter zone name\");\n-          return;\n-      }\n+createZone() {\n+    if (this.zoneName == '') {\n+        this.openSnackBar(\"please enter zone name\");\n+        return;\n+    }\n \n-      if (this.taxVal == '') {\n-          this.openSnackBar(\"please enter tax value\");\n-          return;\n-      }\n+    if (this.taxVal == '') {\n+        this.openSnackBar(\"please enter tax value\");\n+        return;\n+    }\n \n-      if (this.polygon == null || this.polygon == undefined) {\n-          this.openSnackBar(\"please select zone area\");\n-          return;\n-      }\n+    if (this.polygon == null || this.polygon == undefined) {\n+        this.openSnackBar(\"please select zone area\");\n+        return;\n+    }\n \n-      const dataObj = [];\n+    const dataObj = [];\n \n-      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-          const serviceObj = this.serviceWisePriceDocument[i];\n+    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+        const serviceObj = this.serviceWisePriceDocument[i];\n \n-          if (serviceObj.base_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-              return;\n-          }\n+        if (serviceObj.base_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+            return;\n+        }\n \n-          if (serviceObj.per_km_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-              return;\n-          }\n+        if (serviceObj.per_km_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+            return;\n+        }\n \n-          if (serviceObj.per_minute_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-              return;\n-          }\n+        if (serviceObj.per_minute_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+            return;\n+        }\n \n-          if (serviceObj.booking_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-              return;\n-          }\n+        if (serviceObj.booking_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+            return;\n+        }\n \n-          if (serviceObj.minimum_fair == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-              return;\n-          }\n+        if (serviceObj.minimum_fair == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+            return;\n+        }\n \n-          if (serviceObj.minimum_km == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-              return;\n-          }\n+        if (serviceObj.minimum_km == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+            return;\n+        }\n \n-          if (serviceObj.cancel_charge == '') {\n-              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-              return;\n-          }\n+        if (serviceObj.cancel_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+            return;\n+        }\n \n-          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-          const data = Object.assign({}, serviceObj);\n-          data['document_array'] = [];\n-          data['car_document_array'] = [];\n-          dataObj.push(data);\n-      }\n+        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+        const data = Object.assign({}, serviceObj);\n+        data['document_array'] = [];\n+        data['car_document_array'] = [];\n+        dataObj.push(data);\n+    }\n \n-      const polygonBounds = this.polygon.getPath();\n-      this.subArray = [];\n+    const polygonBounds = this.polygon.getPath();\n+    this.subArray = [];\n \n-      polygonBounds.forEach((polygonLatlong: any) => {\n-          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-      });\n+    polygonBounds.forEach((polygonLatlong: any) => {\n+        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+    });\n \n-      const paraObj = {\n-          \"zone_name\": this.zoneName,\n-          \"city\": this.cityName,\n-          \"zone_json\": JSON.stringify(this.subArray),\n-          \"price_json\": JSON.stringify(dataObj),\n-          \"tax\": this.taxVal.toString(),\n-      }\n+    const paraObj = {\n+        \"zone_name\": this.zoneName,\n+        \"city\": this.cityName,\n+        \"zone_json\": JSON.stringify(this.subArray),\n+        \"price_json\": JSON.stringify(dataObj),\n+        \"tax\": this.taxVal.toString(),\n+    }\n \n-      Common.Dlog(paraObj);\n+    Common.Dlog(paraObj);\n \n-      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n \n-          Common.Dlog(responseObj);\n-          if (responseObj.status == 1) {\n-              this.zoneName = '';\n-              this.cityName = '';\n-              this.taxVal = '';\n-              this.serviceWisePriceDocumentAll = [];\n-              this.serviceWisePriceDocument = [];\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.zoneName = '';\n+            this.cityName = '';\n+            this.taxVal = '';\n+            this.serviceWisePriceDocumentAll = [];\n+            this.serviceWisePriceDocument = [];\n \n-              this.serviceList.forEach(serviceObj => {\n-                  const priceObj = new ZoneAdd();\n-                  priceObj.service_id = serviceObj.service_id;\n-                  priceObj.service_name = serviceObj.service_name;\n-                  priceObj.document_array = this.documentList;\n-                  priceObj.car_document_array = this.carDocumentList;\n-                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-              });\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n \n \n-              this.shapes.forEach(shape => {\n-                  shape.setMap(null);\n-              })\n-              this.shapes = [];\n-              this.polygon = null;\n-              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-          }\n-          this.openSnackBar(responseObj.message)\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            })\n+            this.shapes = [];\n+            this.polygon = null;\n+            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+        }\n+        this.openSnackBar(responseObj.message)\n \n-      });\n+    });\n \n-  }\n+}\n \n-  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-      docArr.forEach(item => {\n-          if (item.isSelect == true) {\n-              documentId = documentId + item.doc_id.toString() + ',';\n-          }\n-      });\n+getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+    docArr.forEach(item => {\n+        if (item.isSelect == true) {\n+            documentId = documentId + item.doc_id.toString() + ',';\n+        }\n+    });\n \n-      return documentId.replace(/,\\s*$/, '');\n-  }\n+    return documentId.replace(/,\\s*$/, '');\n+}\n \n \n \n \n"
                },
                {
                    "date": 1722244703083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,307 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+\n+\n+\n+\n+\n+  initDrawingManager(map: GoogleMap) {\n+    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+        drawingControl: true,\n+        drawingControlOptions: {\n+            position: google.maps.ControlPosition.TOP_CENTER,\n+            drawingModes: [\n+                google.maps.drawing.OverlayType.POLYGON,\n+            ],\n+        },\n+        polygonOptions: {\n+            strokeColor: '#00ff00',\n+        }\n+    };\n+    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+    this.drawingManager.setMap(map.googleMap);\n+\n+\n+    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+        //Polygon Drawn\n+        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+            const newShape = event.overlay;\n+            newShape.type = event.type;\n+            this.shapes.push(newShape);\n+            if (this.drawingManager.getDrawingMode()) {\n+                this.drawingManager.setDrawingMode();\n+            }\n+        }\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+        Common.Dlog(\"polygoncomplete\");\n+        this.polygon = polygon;\n+        polygon.setEditable(true);\n+        const polygonBounds = polygon.getPath();\n+        this.subArray = [];\n+        polygonBounds.forEach((polygonLatLong: any) => {\n+            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+        });\n+        Common.Dlog(JSON.stringify(this.subArray));\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+        Common.Dlog(\"drawingmode_changed\");\n+        if (this.drawingManager.getDrawingMode() != null) {\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            });\n+\n+            this.shapes = [];\n+            this.polygon = null;\n+        }\n+    });\n+}\n+\n+serviceCheckClick(serviceObj: Service, event: any) {\n+    serviceObj.isSelect = event.checked;\n+    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+}\n+\n+serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+    docObj.isSelect = event.checked;\n+}\n+\n+getList() {\n+\n+    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.serviceList = responseObj.payload.service;\n+\n+            responseObj.payload.document.forEach((docObj: Document) => {\n+                docObj.isSelect = false;\n+                if (docObj.type == 1) {\n+                    this.documentList.push(docObj);\n+                } else {\n+                    this.carDocumentList.push(docObj);\n+                }\n+            });\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+        } else {\n+            this.serviceList = [];\n+        }\n+        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+    });\n+}\n+\n+openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+        duration: 2000,\n+    });\n+}\n+\n+createZone() {\n+    if (this.zoneName == '') {\n+        this.openSnackBar(\"please enter zone name\");\n+        return;\n+    }\n+\n+    if (this.taxVal == '') {\n+        this.openSnackBar(\"please enter tax value\");\n+        return;\n+    }\n+\n+    if (this.polygon == null || this.polygon == undefined) {\n+        this.openSnackBar(\"please select zone area\");\n+        return;\n+    }\n+\n+    const dataObj = [];\n+\n+    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+        const serviceObj = this.serviceWisePriceDocument[i];\n+\n+        if (serviceObj.base_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_km_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_minute_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+            return;\n+        }\n+\n+        if (serviceObj.booking_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_fair == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_km == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+            return;\n+        }\n+\n+        if (serviceObj.cancel_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+            return;\n+        }\n+\n+        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+        const data = Object.assign({}, serviceObj);\n+        data['document_array'] = [];\n+        data['car_document_array'] = [];\n+        dataObj.push(data);\n+    }\n+\n+    const polygonBounds = this.polygon.getPath();\n+    this.subArray = [];\n+\n+    polygonBounds.forEach((polygonLatlong: any) => {\n+        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+    });\n+\n+    const paraObj = {\n+        \"zone_name\": this.zoneName,\n+        \"city\": this.cityName,\n+        \"zone_json\": JSON.stringify(this.subArray),\n+        \"price_json\": JSON.stringify(dataObj),\n+        \"tax\": this.taxVal.toString(),\n+    }\n+\n+    Common.Dlog(paraObj);\n+\n+    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.zoneName = '';\n+            this.cityName = '';\n+            this.taxVal = '';\n+            this.serviceWisePriceDocumentAll = [];\n+            this.serviceWisePriceDocument = [];\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            })\n+            this.shapes = [];\n+            this.polygon = null;\n+            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+        }\n+        this.openSnackBar(responseObj.message)\n+\n+    });\n+\n+}\n+\n+getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+    docArr.forEach(item => {\n+        if (item.isSelect == true) {\n+            documentId = documentId + item.doc_id.toString() + ',';\n+        }\n+    });\n+\n+    return documentId.replace(/,\\s*$/, '');\n+}\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722244875775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,307 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+\n+\n+\n+\n+\n+  initDrawingManager(map: GoogleMap) {\n+    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+        drawingControl: true,\n+        drawingControlOptions: {\n+            position: google.maps.ControlPosition.TOP_CENTER,\n+            drawingModes: [\n+                google.maps.drawing.OverlayType.POLYGON,\n+            ],\n+        },\n+        polygonOptions: {\n+            strokeColor: '#00ff00',\n+        }\n+    };\n+    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+    this.drawingManager.setMap(map.googleMap);\n+\n+\n+    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+        //Polygon Drawn\n+        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+            const newShape = event.overlay;\n+            newShape.type = event.type;\n+            this.shapes.push(newShape);\n+            if (this.drawingManager.getDrawingMode()) {\n+                this.drawingManager.setDrawingMode(null);\n+            }\n+        }\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+        Common.Dlog(\"polygoncomplete\");\n+        this.polygon = polygon;\n+        polygon.setEditable(true);\n+        const polygonBounds = polygon.getPath();\n+        this.subArray = [];\n+        polygonBounds.forEach((polygonLatLong: any) => {\n+            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+        });\n+        Common.Dlog(JSON.stringify(this.subArray));\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+        Common.Dlog(\"drawingmode_changed\");\n+        if (this.drawingManager.getDrawingMode() != null) {\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            });\n+\n+            this.shapes = [];\n+            this.polygon = null;\n+        }\n+    });\n+}\n+\n+serviceCheckClick(serviceObj: Service, event: any) {\n+    serviceObj.isSelect = event.checked;\n+    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+}\n+\n+serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+    docObj.isSelect = event.checked;\n+}\n+\n+getList() {\n+\n+    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.serviceList = responseObj.payload.service;\n+\n+            responseObj.payload.document.forEach((docObj: Document) => {\n+                docObj.isSelect = false;\n+                if (docObj.type == 1) {\n+                    this.documentList.push(docObj);\n+                } else {\n+                    this.carDocumentList.push(docObj);\n+                }\n+            });\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+        } else {\n+            this.serviceList = [];\n+        }\n+        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+    });\n+}\n+\n+openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+        duration: 2000,\n+    });\n+}\n+\n+createZone() {\n+    if (this.zoneName == '') {\n+        this.openSnackBar(\"please enter zone name\");\n+        return;\n+    }\n+\n+    if (this.taxVal == '') {\n+        this.openSnackBar(\"please enter tax value\");\n+        return;\n+    }\n+\n+    if (this.polygon == null || this.polygon == undefined) {\n+        this.openSnackBar(\"please select zone area\");\n+        return;\n+    }\n+\n+    const dataObj = [];\n+\n+    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+        const serviceObj = this.serviceWisePriceDocument[i];\n+\n+        if (serviceObj.base_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_km_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_minute_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+            return;\n+        }\n+\n+        if (serviceObj.booking_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_fair == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_km == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+            return;\n+        }\n+\n+        if (serviceObj.cancel_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+            return;\n+        }\n+\n+        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+        const data = Object.assign({}, serviceObj);\n+        data['document_array'] = [];\n+        data['car_document_array'] = [];\n+        dataObj.push(data);\n+    }\n+\n+    const polygonBounds = this.polygon.getPath();\n+    this.subArray = [];\n+\n+    polygonBounds.forEach((polygonLatlong: any) => {\n+        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+    });\n+\n+    const paraObj = {\n+        \"zone_name\": this.zoneName,\n+        \"city\": this.cityName,\n+        \"zone_json\": JSON.stringify(this.subArray),\n+        \"price_json\": JSON.stringify(dataObj),\n+        \"tax\": this.taxVal.toString(),\n+    }\n+\n+    Common.Dlog(paraObj);\n+\n+    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.zoneName = '';\n+            this.cityName = '';\n+            this.taxVal = '';\n+            this.serviceWisePriceDocumentAll = [];\n+            this.serviceWisePriceDocument = [];\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            })\n+            this.shapes = [];\n+            this.polygon = null;\n+            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+        }\n+        this.openSnackBar(responseObj.message)\n+\n+    });\n+\n+}\n+\n+getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+    docArr.forEach(item => {\n+        if (item.isSelect == true) {\n+            documentId = documentId + item.doc_id.toString() + ',';\n+        }\n+    });\n+\n+    return documentId.replace(/,\\s*$/, '');\n+}\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722247077367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,618 +304,4 @@\n \n \n \n }\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-\n-\n-\n-\n-\n-  initDrawingManager(map: GoogleMap) {\n-    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-        drawingControl: true,\n-        drawingControlOptions: {\n-            position: google.maps.ControlPosition.TOP_CENTER,\n-            drawingModes: [\n-                google.maps.drawing.OverlayType.POLYGON,\n-            ],\n-        },\n-        polygonOptions: {\n-            strokeColor: '#00ff00',\n-        }\n-    };\n-    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-    this.drawingManager.setMap(map.googleMap);\n-\n-\n-    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-        //Polygon Drawn\n-        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-            const newShape = event.overlay;\n-            newShape.type = event.type;\n-            this.shapes.push(newShape);\n-            if (this.drawingManager.getDrawingMode()) {\n-                this.drawingManager.setDrawingMode();\n-            }\n-        }\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-        Common.Dlog(\"polygoncomplete\");\n-        this.polygon = polygon;\n-        polygon.setEditable(true);\n-        const polygonBounds = polygon.getPath();\n-        this.subArray = [];\n-        polygonBounds.forEach((polygonLatLong: any) => {\n-            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-        });\n-        Common.Dlog(JSON.stringify(this.subArray));\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-        Common.Dlog(\"drawingmode_changed\");\n-        if (this.drawingManager.getDrawingMode() != null) {\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            });\n-\n-            this.shapes = [];\n-            this.polygon = null;\n-        }\n-    });\n-}\n-\n-serviceCheckClick(serviceObj: Service, event: any) {\n-    serviceObj.isSelect = event.checked;\n-    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-}\n-\n-serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-    docObj.isSelect = event.checked;\n-}\n-\n-getList() {\n-\n-    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.serviceList = responseObj.payload.service;\n-\n-            responseObj.payload.document.forEach((docObj: Document) => {\n-                docObj.isSelect = false;\n-                if (docObj.type == 1) {\n-                    this.documentList.push(docObj);\n-                } else {\n-                    this.carDocumentList.push(docObj);\n-                }\n-            });\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-        } else {\n-            this.serviceList = [];\n-        }\n-        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-    });\n-}\n-\n-openSnackBar(message: string) {\n-    this.snackBar.open(message, \"ok\", {\n-        duration: 2000,\n-    });\n-}\n-\n-createZone() {\n-    if (this.zoneName == '') {\n-        this.openSnackBar(\"please enter zone name\");\n-        return;\n-    }\n-\n-    if (this.taxVal == '') {\n-        this.openSnackBar(\"please enter tax value\");\n-        return;\n-    }\n-\n-    if (this.polygon == null || this.polygon == undefined) {\n-        this.openSnackBar(\"please select zone area\");\n-        return;\n-    }\n-\n-    const dataObj = [];\n-\n-    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-        const serviceObj = this.serviceWisePriceDocument[i];\n-\n-        if (serviceObj.base_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_km_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_minute_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-            return;\n-        }\n-\n-        if (serviceObj.booking_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_fair == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_km == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-            return;\n-        }\n-\n-        if (serviceObj.cancel_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-            return;\n-        }\n-\n-        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-        const data = Object.assign({}, serviceObj);\n-        data['document_array'] = [];\n-        data['car_document_array'] = [];\n-        dataObj.push(data);\n-    }\n-\n-    const polygonBounds = this.polygon.getPath();\n-    this.subArray = [];\n-\n-    polygonBounds.forEach((polygonLatlong: any) => {\n-        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-    });\n-\n-    const paraObj = {\n-        \"zone_name\": this.zoneName,\n-        \"city\": this.cityName,\n-        \"zone_json\": JSON.stringify(this.subArray),\n-        \"price_json\": JSON.stringify(dataObj),\n-        \"tax\": this.taxVal.toString(),\n-    }\n-\n-    Common.Dlog(paraObj);\n-\n-    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.zoneName = '';\n-            this.cityName = '';\n-            this.taxVal = '';\n-            this.serviceWisePriceDocumentAll = [];\n-            this.serviceWisePriceDocument = [];\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            })\n-            this.shapes = [];\n-            this.polygon = null;\n-            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-        }\n-        this.openSnackBar(responseObj.message)\n-\n-    });\n-\n-}\n-\n-getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-    docArr.forEach(item => {\n-        if (item.isSelect == true) {\n-            documentId = documentId + item.doc_id.toString() + ',';\n-        }\n-    });\n-\n-    return documentId.replace(/,\\s*$/, '');\n-}\n-\n-\n-\n-\n-}\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-\n-\n-\n-\n-\n-  initDrawingManager(map: GoogleMap) {\n-    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-        drawingControl: true,\n-        drawingControlOptions: {\n-            position: google.maps.ControlPosition.TOP_CENTER,\n-            drawingModes: [\n-                google.maps.drawing.OverlayType.POLYGON,\n-            ],\n-        },\n-        polygonOptions: {\n-            strokeColor: '#00ff00',\n-        }\n-    };\n-    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-    this.drawingManager.setMap(map.googleMap);\n-\n-\n-    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-        //Polygon Drawn\n-        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-            const newShape = event.overlay;\n-            newShape.type = event.type;\n-            this.shapes.push(newShape);\n-            if (this.drawingManager.getDrawingMode()) {\n-                this.drawingManager.setDrawingMode(null);\n-            }\n-        }\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-        Common.Dlog(\"polygoncomplete\");\n-        this.polygon = polygon;\n-        polygon.setEditable(true);\n-        const polygonBounds = polygon.getPath();\n-        this.subArray = [];\n-        polygonBounds.forEach((polygonLatLong: any) => {\n-            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-        });\n-        Common.Dlog(JSON.stringify(this.subArray));\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-        Common.Dlog(\"drawingmode_changed\");\n-        if (this.drawingManager.getDrawingMode() != null) {\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            });\n-\n-            this.shapes = [];\n-            this.polygon = null;\n-        }\n-    });\n-}\n-\n-serviceCheckClick(serviceObj: Service, event: any) {\n-    serviceObj.isSelect = event.checked;\n-    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-}\n-\n-serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-    docObj.isSelect = event.checked;\n-}\n-\n-getList() {\n-\n-    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.serviceList = responseObj.payload.service;\n-\n-            responseObj.payload.document.forEach((docObj: Document) => {\n-                docObj.isSelect = false;\n-                if (docObj.type == 1) {\n-                    this.documentList.push(docObj);\n-                } else {\n-                    this.carDocumentList.push(docObj);\n-                }\n-            });\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-        } else {\n-            this.serviceList = [];\n-        }\n-        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-    });\n-}\n-\n-openSnackBar(message: string) {\n-    this.snackBar.open(message, \"ok\", {\n-        duration: 2000,\n-    });\n-}\n-\n-createZone() {\n-    if (this.zoneName == '') {\n-        this.openSnackBar(\"please enter zone name\");\n-        return;\n-    }\n-\n-    if (this.taxVal == '') {\n-        this.openSnackBar(\"please enter tax value\");\n-        return;\n-    }\n-\n-    if (this.polygon == null || this.polygon == undefined) {\n-        this.openSnackBar(\"please select zone area\");\n-        return;\n-    }\n-\n-    const dataObj = [];\n-\n-    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-        const serviceObj = this.serviceWisePriceDocument[i];\n-\n-        if (serviceObj.base_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_km_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_minute_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-            return;\n-        }\n-\n-        if (serviceObj.booking_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_fair == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_km == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-            return;\n-        }\n-\n-        if (serviceObj.cancel_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-            return;\n-        }\n-\n-        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-        const data = Object.assign({}, serviceObj);\n-        data['document_array'] = [];\n-        data['car_document_array'] = [];\n-        dataObj.push(data);\n-    }\n-\n-    const polygonBounds = this.polygon.getPath();\n-    this.subArray = [];\n-\n-    polygonBounds.forEach((polygonLatlong: any) => {\n-        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-    });\n-\n-    const paraObj = {\n-        \"zone_name\": this.zoneName,\n-        \"city\": this.cityName,\n-        \"zone_json\": JSON.stringify(this.subArray),\n-        \"price_json\": JSON.stringify(dataObj),\n-        \"tax\": this.taxVal.toString(),\n-    }\n-\n-    Common.Dlog(paraObj);\n-\n-    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.zoneName = '';\n-            this.cityName = '';\n-            this.taxVal = '';\n-            this.serviceWisePriceDocumentAll = [];\n-            this.serviceWisePriceDocument = [];\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            })\n-            this.shapes = [];\n-            this.polygon = null;\n-            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-        }\n-        this.openSnackBar(responseObj.message)\n-\n-    });\n-\n-}\n-\n-getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-    docArr.forEach(item => {\n-        if (item.isSelect == true) {\n-            documentId = documentId + item.doc_id.toString() + ',';\n-        }\n-    });\n-\n-    return documentId.replace(/,\\s*$/, '');\n-}\n-\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1722248340069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,307 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg&libraries=drawing', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+\n+\n+\n+\n+\n+  initDrawingManager(map: GoogleMap) {\n+    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+        drawingControl: true,\n+        drawingControlOptions: {\n+            position: google.maps.ControlPosition.TOP_CENTER,\n+            drawingModes: [\n+                google.maps.drawing.OverlayType.POLYGON,\n+            ],\n+        },\n+        polygonOptions: {\n+            strokeColor: '#00ff00',\n+        }\n+    };\n+    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+    this.drawingManager.setMap(map.googleMap);\n+\n+\n+    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+        //Polygon Drawn\n+        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+            const newShape = event.overlay;\n+            newShape.type = event.type;\n+            this.shapes.push(newShape);\n+            if (this.drawingManager.getDrawingMode()) {\n+                this.drawingManager.setDrawingMode(null);\n+            }\n+        }\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+        Common.Dlog(\"polygoncomplete\");\n+        this.polygon = polygon;\n+        polygon.setEditable(true);\n+        const polygonBounds = polygon.getPath();\n+        this.subArray = [];\n+        polygonBounds.forEach((polygonLatLong: any) => {\n+            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+        });\n+        Common.Dlog(JSON.stringify(this.subArray));\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+        Common.Dlog(\"drawingmode_changed\");\n+        if (this.drawingManager.getDrawingMode() != null) {\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            });\n+\n+            this.shapes = [];\n+            this.polygon = null;\n+        }\n+    });\n+}\n+\n+serviceCheckClick(serviceObj: Service, event: any) {\n+    serviceObj.isSelect = event.checked;\n+    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+}\n+\n+serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+    docObj.isSelect = event.checked;\n+}\n+\n+getList() {\n+\n+    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.serviceList = responseObj.payload.service;\n+\n+            responseObj.payload.document.forEach((docObj: Document) => {\n+                docObj.isSelect = false;\n+                if (docObj.type == 1) {\n+                    this.documentList.push(docObj);\n+                } else {\n+                    this.carDocumentList.push(docObj);\n+                }\n+            });\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+        } else {\n+            this.serviceList = [];\n+        }\n+        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+    });\n+}\n+\n+openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+        duration: 2000,\n+    });\n+}\n+\n+createZone() {\n+    if (this.zoneName == '') {\n+        this.openSnackBar(\"please enter zone name\");\n+        return;\n+    }\n+\n+    if (this.taxVal == '') {\n+        this.openSnackBar(\"please enter tax value\");\n+        return;\n+    }\n+\n+    if (this.polygon == null || this.polygon == undefined) {\n+        this.openSnackBar(\"please select zone area\");\n+        return;\n+    }\n+\n+    const dataObj = [];\n+\n+    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+        const serviceObj = this.serviceWisePriceDocument[i];\n+\n+        if (serviceObj.base_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_km_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_minute_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+            return;\n+        }\n+\n+        if (serviceObj.booking_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_fair == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_km == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+            return;\n+        }\n+\n+        if (serviceObj.cancel_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+            return;\n+        }\n+\n+        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+        const data = Object.assign({}, serviceObj);\n+        data['document_array'] = [];\n+        data['car_document_array'] = [];\n+        dataObj.push(data);\n+    }\n+\n+    const polygonBounds = this.polygon.getPath();\n+    this.subArray = [];\n+\n+    polygonBounds.forEach((polygonLatlong: any) => {\n+        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+    });\n+\n+    const paraObj = {\n+        \"zone_name\": this.zoneName,\n+        \"city\": this.cityName,\n+        \"zone_json\": JSON.stringify(this.subArray),\n+        \"price_json\": JSON.stringify(dataObj),\n+        \"tax\": this.taxVal.toString(),\n+    }\n+\n+    Common.Dlog(paraObj);\n+\n+    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.zoneName = '';\n+            this.cityName = '';\n+            this.taxVal = '';\n+            this.serviceWisePriceDocumentAll = [];\n+            this.serviceWisePriceDocument = [];\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            })\n+            this.shapes = [];\n+            this.polygon = null;\n+            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+        }\n+        this.openSnackBar(responseObj.message)\n+\n+    });\n+\n+}\n+\n+getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+    docArr.forEach(item => {\n+        if (item.isSelect == true) {\n+            documentId = documentId + item.doc_id.toString() + ',';\n+        }\n+    });\n+\n+    return documentId.replace(/,\\s*$/, '');\n+}\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1722248430596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,311 +304,4 @@\n \n \n \n }\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-\n-\n-\n-\n-\n-  initDrawingManager(map: GoogleMap) {\n-    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-        drawingControl: true,\n-        drawingControlOptions: {\n-            position: google.maps.ControlPosition.TOP_CENTER,\n-            drawingModes: [\n-                google.maps.drawing.OverlayType.POLYGON,\n-            ],\n-        },\n-        polygonOptions: {\n-            strokeColor: '#00ff00',\n-        }\n-    };\n-    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-    this.drawingManager.setMap(map.googleMap);\n-\n-\n-    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-        //Polygon Drawn\n-        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-            const newShape = event.overlay;\n-            newShape.type = event.type;\n-            this.shapes.push(newShape);\n-            if (this.drawingManager.getDrawingMode()) {\n-                this.drawingManager.setDrawingMode(null);\n-            }\n-        }\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-        Common.Dlog(\"polygoncomplete\");\n-        this.polygon = polygon;\n-        polygon.setEditable(true);\n-        const polygonBounds = polygon.getPath();\n-        this.subArray = [];\n-        polygonBounds.forEach((polygonLatLong: any) => {\n-            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-        });\n-        Common.Dlog(JSON.stringify(this.subArray));\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-        Common.Dlog(\"drawingmode_changed\");\n-        if (this.drawingManager.getDrawingMode() != null) {\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            });\n-\n-            this.shapes = [];\n-            this.polygon = null;\n-        }\n-    });\n-}\n-\n-serviceCheckClick(serviceObj: Service, event: any) {\n-    serviceObj.isSelect = event.checked;\n-    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-}\n-\n-serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-    docObj.isSelect = event.checked;\n-}\n-\n-getList() {\n-\n-    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.serviceList = responseObj.payload.service;\n-\n-            responseObj.payload.document.forEach((docObj: Document) => {\n-                docObj.isSelect = false;\n-                if (docObj.type == 1) {\n-                    this.documentList.push(docObj);\n-                } else {\n-                    this.carDocumentList.push(docObj);\n-                }\n-            });\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-        } else {\n-            this.serviceList = [];\n-        }\n-        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-    });\n-}\n-\n-openSnackBar(message: string) {\n-    this.snackBar.open(message, \"ok\", {\n-        duration: 2000,\n-    });\n-}\n-\n-createZone() {\n-    if (this.zoneName == '') {\n-        this.openSnackBar(\"please enter zone name\");\n-        return;\n-    }\n-\n-    if (this.taxVal == '') {\n-        this.openSnackBar(\"please enter tax value\");\n-        return;\n-    }\n-\n-    if (this.polygon == null || this.polygon == undefined) {\n-        this.openSnackBar(\"please select zone area\");\n-        return;\n-    }\n-\n-    const dataObj = [];\n-\n-    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-        const serviceObj = this.serviceWisePriceDocument[i];\n-\n-        if (serviceObj.base_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_km_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_minute_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-            return;\n-        }\n-\n-        if (serviceObj.booking_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_fair == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_km == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-            return;\n-        }\n-\n-        if (serviceObj.cancel_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-            return;\n-        }\n-\n-        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-        const data = Object.assign({}, serviceObj);\n-        data['document_array'] = [];\n-        data['car_document_array'] = [];\n-        dataObj.push(data);\n-    }\n-\n-    const polygonBounds = this.polygon.getPath();\n-    this.subArray = [];\n-\n-    polygonBounds.forEach((polygonLatlong: any) => {\n-        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-    });\n-\n-    const paraObj = {\n-        \"zone_name\": this.zoneName,\n-        \"city\": this.cityName,\n-        \"zone_json\": JSON.stringify(this.subArray),\n-        \"price_json\": JSON.stringify(dataObj),\n-        \"tax\": this.taxVal.toString(),\n-    }\n-\n-    Common.Dlog(paraObj);\n-\n-    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.zoneName = '';\n-            this.cityName = '';\n-            this.taxVal = '';\n-            this.serviceWisePriceDocumentAll = [];\n-            this.serviceWisePriceDocument = [];\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            })\n-            this.shapes = [];\n-            this.polygon = null;\n-            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-        }\n-        this.openSnackBar(responseObj.message)\n-\n-    });\n-\n-}\n-\n-getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-    docArr.forEach(item => {\n-        if (item.isSelect == true) {\n-            documentId = documentId + item.doc_id.toString() + ',';\n-        }\n-    });\n-\n-    return documentId.replace(/,\\s*$/, '');\n-}\n-\n-\n-\n-\n-}\n"
                },
                {
                    "date": 1723916110398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,307 @@\n+import { Component, OnInit, ViewChild } from '@angular/core';\n+import { GoogleMap } from '@angular/google-maps';\n+import { Observable, catchError, map, of } from 'rxjs';\n+import { Service } from '../../model/service';\n+import { MatTableDataSource } from '@angular/material/table';\n+import { HttpClient } from '@angular/common/http';\n+import { WebService } from '../../web.service';\n+import { Common } from '../../common';\n+import { MatSnackBar } from '@angular/material/snack-bar';\n+import { Document } from '../../model/document';\n+import { ZoneAdd } from '../../model/zone-add';\n+\n+\n+@Component({\n+  selector: 'app-zone-add',\n+  templateUrl: './zone-add.component.html',\n+  styleUrl: './zone-add.component.css'\n+})\n+\n+export class ZoneAddComponent implements OnInit {\n+\n+  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n+      if (m) {\n+          this.initDrawingManager(m);\n+      }\n+  }\n+\n+  apiLoaded: Observable<boolean>;\n+  drawingManager: any;\n+\n+  polygons: Array<any> = [];\n+  subArray: Array<any> = [];\n+  shapes: Array<any> = [];\n+  polygon: any;\n+\n+  options: google.maps.MapOptions = {\n+      zoom: 14,\n+      disableDefaultUI: true\n+  };\n+\n+  zoneName = '';\n+  cityName = '';\n+  taxVal = '5';\n+\n+  serviceList: Array<Service> = [];\n+  documentList: Array<Document> = [];\n+  carDocumentList: Array<Document> = [];\n+  serviceWisePriceDocument: Array<ZoneAdd> = [];\n+  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n+\n+  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n+\n+  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n+      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n+\n+  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n+\n+      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg&libraries=drawing', 'callback')\n+          .pipe(\n+              map(() => true),\n+              catchError(() => of(false))\n+          );\n+  }\n+  ngOnInit(): void {\n+      this.getList();\n+  }\n+\n+\n+\n+\n+\n+\n+  initDrawingManager(map: GoogleMap) {\n+    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n+        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n+        drawingControl: true,\n+        drawingControlOptions: {\n+            position: google.maps.ControlPosition.TOP_CENTER,\n+            drawingModes: [\n+                google.maps.drawing.OverlayType.POLYGON,\n+            ],\n+        },\n+        polygonOptions: {\n+            strokeColor: '#00ff00',\n+        }\n+    };\n+    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n+    this.drawingManager.setMap(map.googleMap);\n+\n+\n+    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n+        //Polygon Drawn\n+        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n+            const newShape = event.overlay;\n+            newShape.type = event.type;\n+            this.shapes.push(newShape);\n+            if (this.drawingManager.getDrawingMode()) {\n+                this.drawingManager.setDrawingMode(null);\n+            }\n+        }\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n+        Common.Dlog(\"polygoncomplete\");\n+        this.polygon = polygon;\n+        polygon.setEditable(true);\n+        const polygonBounds = polygon.getPath();\n+        this.subArray = [];\n+        polygonBounds.forEach((polygonLatLong: any) => {\n+            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n+\n+        });\n+        Common.Dlog(JSON.stringify(this.subArray));\n+    });\n+\n+    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n+        Common.Dlog(\"drawingmode_changed\");\n+        if (this.drawingManager.getDrawingMode() != null) {\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            });\n+\n+            this.shapes = [];\n+            this.polygon = null;\n+        }\n+    });\n+}\n+\n+serviceCheckClick(serviceObj: Service, event: any) {\n+    serviceObj.isSelect = event.checked;\n+    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n+    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n+    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+}\n+\n+serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n+    docObj.isSelect = event.checked;\n+}\n+\n+getList() {\n+\n+    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.serviceList = responseObj.payload.service;\n+\n+            responseObj.payload.document.forEach((docObj: Document) => {\n+                docObj.isSelect = false;\n+                if (docObj.type == 1) {\n+                    this.documentList.push(docObj);\n+                } else {\n+                    this.carDocumentList.push(docObj);\n+                }\n+            });\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+        } else {\n+            this.serviceList = [];\n+        }\n+        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+    });\n+}\n+\n+openSnackBar(message: string) {\n+    this.snackBar.open(message, \"ok\", {\n+        duration: 2000,\n+    });\n+}\n+\n+createZone() {\n+    if (this.zoneName == '') {\n+        this.openSnackBar(\"please enter zone name\");\n+        return;\n+    }\n+\n+    if (this.taxVal == '') {\n+        this.openSnackBar(\"please enter tax value\");\n+        return;\n+    }\n+\n+    if (this.polygon == null || this.polygon == undefined) {\n+        this.openSnackBar(\"please select zone area\");\n+        return;\n+    }\n+\n+    const dataObj = [];\n+\n+    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n+        const serviceObj = this.serviceWisePriceDocument[i];\n+\n+        if (serviceObj.base_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_km_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n+            return;\n+        }\n+\n+        if (serviceObj.per_minute_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n+            return;\n+        }\n+\n+        if (serviceObj.booking_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_fair == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n+            return;\n+        }\n+\n+        if (serviceObj.minimum_km == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n+            return;\n+        }\n+\n+        if (serviceObj.cancel_charge == '') {\n+            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n+            return;\n+        }\n+\n+        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n+        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n+        const data = Object.assign({}, serviceObj);\n+        data['document_array'] = [];\n+        data['car_document_array'] = [];\n+        dataObj.push(data);\n+    }\n+\n+    const polygonBounds = this.polygon.getPath();\n+    this.subArray = [];\n+\n+    polygonBounds.forEach((polygonLatlong: any) => {\n+        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n+    });\n+\n+    const paraObj = {\n+        \"zone_name\": this.zoneName,\n+        \"city\": this.cityName,\n+        \"zone_json\": JSON.stringify(this.subArray),\n+        \"price_json\": JSON.stringify(dataObj),\n+        \"tax\": this.taxVal.toString(),\n+    }\n+\n+    Common.Dlog(paraObj);\n+\n+    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n+\n+        Common.Dlog(responseObj);\n+        if (responseObj.status == 1) {\n+            this.zoneName = '';\n+            this.cityName = '';\n+            this.taxVal = '';\n+            this.serviceWisePriceDocumentAll = [];\n+            this.serviceWisePriceDocument = [];\n+\n+            this.serviceList.forEach(serviceObj => {\n+                const priceObj = new ZoneAdd();\n+                priceObj.service_id = serviceObj.service_id;\n+                priceObj.service_name = serviceObj.service_name;\n+                priceObj.document_array = this.documentList;\n+                priceObj.car_document_array = this.carDocumentList;\n+                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n+            });\n+\n+\n+            this.shapes.forEach(shape => {\n+                shape.setMap(null);\n+            })\n+            this.shapes = [];\n+            this.polygon = null;\n+            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n+        }\n+        this.openSnackBar(responseObj.message)\n+\n+    });\n+\n+}\n+\n+getDocumentId(docArr: Array<Document>, documentId: string = '') {\n+    docArr.forEach(item => {\n+        if (item.isSelect == true) {\n+            documentId = documentId + item.doc_id.toString() + ',';\n+        }\n+    });\n+\n+    return documentId.replace(/,\\s*$/, '');\n+}\n+\n+\n+\n+\n+}\n"
                },
                {
                    "date": 1723916262357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,311 +304,4 @@\n \n \n \n }\n-import { Component, OnInit, ViewChild } from '@angular/core';\n-import { GoogleMap } from '@angular/google-maps';\n-import { Observable, catchError, map, of } from 'rxjs';\n-import { Service } from '../../model/service';\n-import { MatTableDataSource } from '@angular/material/table';\n-import { HttpClient } from '@angular/common/http';\n-import { WebService } from '../../web.service';\n-import { Common } from '../../common';\n-import { MatSnackBar } from '@angular/material/snack-bar';\n-import { Document } from '../../model/document';\n-import { ZoneAdd } from '../../model/zone-add';\n-\n-\n-@Component({\n-  selector: 'app-zone-add',\n-  templateUrl: './zone-add.component.html',\n-  styleUrl: './zone-add.component.css'\n-})\n-\n-export class ZoneAddComponent implements OnInit {\n-\n-  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n-      if (m) {\n-          this.initDrawingManager(m);\n-      }\n-  }\n-\n-  apiLoaded: Observable<boolean>;\n-  drawingManager: any;\n-\n-  polygons: Array<any> = [];\n-  subArray: Array<any> = [];\n-  shapes: Array<any> = [];\n-  polygon: any;\n-\n-  options: google.maps.MapOptions = {\n-      zoom: 14,\n-      disableDefaultUI: true\n-  };\n-\n-  zoneName = '';\n-  cityName = '';\n-  taxVal = '5';\n-\n-  serviceList: Array<Service> = [];\n-  documentList: Array<Document> = [];\n-  carDocumentList: Array<Document> = [];\n-  serviceWisePriceDocument: Array<ZoneAdd> = [];\n-  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n-\n-  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n-\n-  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n-      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n-\n-  constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n-\n-      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg&libraries=drawing', 'callback')\n-          .pipe(\n-              map(() => true),\n-              catchError(() => of(false))\n-          );\n-  }\n-  ngOnInit(): void {\n-      this.getList();\n-  }\n-\n-\n-\n-\n-\n-\n-  initDrawingManager(map: GoogleMap) {\n-    const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n-        drawingMode: google.maps.drawing.OverlayType.POLYGON,\n-        drawingControl: true,\n-        drawingControlOptions: {\n-            position: google.maps.ControlPosition.TOP_CENTER,\n-            drawingModes: [\n-                google.maps.drawing.OverlayType.POLYGON,\n-            ],\n-        },\n-        polygonOptions: {\n-            strokeColor: '#00ff00',\n-        }\n-    };\n-    this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n-    this.drawingManager.setMap(map.googleMap);\n-\n-\n-    google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n-        //Polygon Drawn\n-        if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n-            const newShape = event.overlay;\n-            newShape.type = event.type;\n-            this.shapes.push(newShape);\n-            if (this.drawingManager.getDrawingMode()) {\n-                this.drawingManager.setDrawingMode(null);\n-            }\n-        }\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n-        Common.Dlog(\"polygoncomplete\");\n-        this.polygon = polygon;\n-        polygon.setEditable(true);\n-        const polygonBounds = polygon.getPath();\n-        this.subArray = [];\n-        polygonBounds.forEach((polygonLatLong: any) => {\n-            Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-            this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n-\n-        });\n-        Common.Dlog(JSON.stringify(this.subArray));\n-    });\n-\n-    google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n-        Common.Dlog(\"drawingmode_changed\");\n-        if (this.drawingManager.getDrawingMode() != null) {\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            });\n-\n-            this.shapes = [];\n-            this.polygon = null;\n-        }\n-    });\n-}\n-\n-serviceCheckClick(serviceObj: Service, event: any) {\n-    serviceObj.isSelect = event.checked;\n-    this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n-    this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n-    this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-}\n-\n-serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n-    docObj.isSelect = event.checked;\n-}\n-\n-getList() {\n-\n-    this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.serviceList = responseObj.payload.service;\n-\n-            responseObj.payload.document.forEach((docObj: Document) => {\n-                docObj.isSelect = false;\n-                if (docObj.type == 1) {\n-                    this.documentList.push(docObj);\n-                } else {\n-                    this.carDocumentList.push(docObj);\n-                }\n-            });\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-        } else {\n-            this.serviceList = [];\n-        }\n-        this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-    });\n-}\n-\n-openSnackBar(message: string) {\n-    this.snackBar.open(message, \"ok\", {\n-        duration: 2000,\n-    });\n-}\n-\n-createZone() {\n-    if (this.zoneName == '') {\n-        this.openSnackBar(\"please enter zone name\");\n-        return;\n-    }\n-\n-    if (this.taxVal == '') {\n-        this.openSnackBar(\"please enter tax value\");\n-        return;\n-    }\n-\n-    if (this.polygon == null || this.polygon == undefined) {\n-        this.openSnackBar(\"please select zone area\");\n-        return;\n-    }\n-\n-    const dataObj = [];\n-\n-    for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n-        const serviceObj = this.serviceWisePriceDocument[i];\n-\n-        if (serviceObj.base_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_km_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n-            return;\n-        }\n-\n-        if (serviceObj.per_minute_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n-            return;\n-        }\n-\n-        if (serviceObj.booking_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_fair == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n-            return;\n-        }\n-\n-        if (serviceObj.minimum_km == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n-            return;\n-        }\n-\n-        if (serviceObj.cancel_charge == '') {\n-            this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n-            return;\n-        }\n-\n-        serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n-        serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n-        const data = Object.assign({}, serviceObj);\n-        data['document_array'] = [];\n-        data['car_document_array'] = [];\n-        dataObj.push(data);\n-    }\n-\n-    const polygonBounds = this.polygon.getPath();\n-    this.subArray = [];\n-\n-    polygonBounds.forEach((polygonLatlong: any) => {\n-        this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n-    });\n-\n-    const paraObj = {\n-        \"zone_name\": this.zoneName,\n-        \"city\": this.cityName,\n-        \"zone_json\": JSON.stringify(this.subArray),\n-        \"price_json\": JSON.stringify(dataObj),\n-        \"tax\": this.taxVal.toString(),\n-    }\n-\n-    Common.Dlog(paraObj);\n-\n-    this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n-\n-        Common.Dlog(responseObj);\n-        if (responseObj.status == 1) {\n-            this.zoneName = '';\n-            this.cityName = '';\n-            this.taxVal = '';\n-            this.serviceWisePriceDocumentAll = [];\n-            this.serviceWisePriceDocument = [];\n-\n-            this.serviceList.forEach(serviceObj => {\n-                const priceObj = new ZoneAdd();\n-                priceObj.service_id = serviceObj.service_id;\n-                priceObj.service_name = serviceObj.service_name;\n-                priceObj.document_array = this.documentList;\n-                priceObj.car_document_array = this.carDocumentList;\n-                this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n-            });\n-\n-\n-            this.shapes.forEach(shape => {\n-                shape.setMap(null);\n-            })\n-            this.shapes = [];\n-            this.polygon = null;\n-            this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n-        }\n-        this.openSnackBar(responseObj.message)\n-\n-    });\n-\n-}\n-\n-getDocumentId(docArr: Array<Document>, documentId: string = '') {\n-    docArr.forEach(item => {\n-        if (item.isSelect == true) {\n-            documentId = documentId + item.doc_id.toString() + ',';\n-        }\n-    });\n-\n-    return documentId.replace(/,\\s*$/, '');\n-}\n-\n-\n-\n-\n-}\n"
                }
            ],
            "date": 1722118085094,
            "name": "Commit-0",
            "content": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { GoogleMap } from '@angular/google-maps';\nimport { Observable, catchError, map, of } from 'rxjs';\nimport { Service } from '../../model/service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { HttpClient } from '@angular/common/http';\nimport { WebService } from '../../web.service';\nimport { Common } from '../../common';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Document } from '../../model/document';\nimport { ZoneAdd } from '../../model/zone-add';\n\n\n@Component({\n  selector: 'app-zone-add',\n  templateUrl: './zone-add.component.html',\n  styleUrl: './zone-add.component.css'\n})\n\nexport class ZoneAddComponent implements OnInit {\n\n  @ViewChild(GoogleMap, { static: false }) set map(m: GoogleMap) {\n      if (m) {\n          this.initDrawingManager(m);\n      }\n  }\n\n  apiLoaded: Observable<boolean>;\n  drawingManager: any;\n\n  polygons: Array<any> = [];\n  subArray: Array<any> = [];\n  shapes: Array<any> = [];\n  polygon: any;\n\n  options: google.maps.MapOptions = {\n      zoom: 14,\n      disableDefaultUI: true\n  };\n\n  zoneName = '';\n  cityName = '';\n  taxVal = '5';\n\n  serviceList: Array<Service> = [];\n  documentList: Array<Document> = [];\n  carDocumentList: Array<Document> = [];\n  serviceWisePriceDocument: Array<ZoneAdd> = [];\n  serviceWisePriceDocumentAll: Array<ZoneAdd> = [];\n\n  dataSource: MatTableDataSource<ZoneAdd> = new MatTableDataSource<ZoneAdd>();\n\n  displayedColumns = ['serviceName', 'baseCharge', 'perKmCharge', 'perMinCharge', 'perBookingCharge',\n      'perMinimumCharge', 'minimumKm', 'cancelCharge', 'documentName', 'carDocument'];\n\n  /*constructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n\n      this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n          .pipe(\n              map(() => true),\n              catchError(() => of(false))\n          );*/\n\n\n\nconstructor(httpClient: HttpClient, public webService: WebService, public snackBar: MatSnackBar) {\n\n    this.apiLoaded = httpClient.jsonp('https://maps.googleapis.com/maps/api/js?key=AIzaSyAjRRCJlLrQqxyNXNWEo20KqQaw5eYPtjg', 'callback')\n        .pipe(\n            map(() => true),\n            catchError(() => of(false))\n        );\n\n\n  }\n  ngOnInit(): void {\n      this.getList();\n  }\n\n  initDrawingManager(map: GoogleMap) {\n      const drawingOptions: google.maps.drawing.DrawingManagerOptions = {\n          drawingMode: google.maps.drawing.OverlayType.POLYGON,\n          drawingControl: true,\n          drawingControlOptions: {\n              position: google.maps.ControlPosition.TOP_CENTER,\n              drawingModes: [\n                  google.maps.drawing.OverlayType.POLYGON,\n              ],\n          },\n          polygonOptions: {\n              strokeColor: '#00ff00',\n          }\n      };\n      this.drawingManager = new google.maps.drawing.DrawingManager(drawingOptions);\n      this.drawingManager.setMap(map.googleMap);\n\n\n      google.maps.event.addListener(this.drawingManager, \"overlaycomplete\", (event: any) => {\n          //Polygon Drawn\n          if (event.type === google.maps.drawing.OverlayType.POLYGON) {\n              const newShape = event.overlay;\n              newShape.type = event.type;\n              this.shapes.push(newShape);\n              if (this.drawingManager.getDrawingMode()) {\n                  this.drawingManager.setDrawingMode(null);\n              }\n          }\n      });\n\n      google.maps.event.addListener(this.drawingManager, \"polygoncomplete\", (polygon: any) => {\n          Common.Dlog(\"polygoncomplete\");\n          this.polygon = polygon;\n          polygon.setEditable(true);\n          const polygonBounds = polygon.getPath();\n          this.subArray = [];\n          polygonBounds.forEach((polygonLatLong: any) => {\n              Common.Dlog({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n              this.subArray.push({ 'lat': polygonLatLong.lat(), \"lng\": polygonLatLong.lng() });\n\n          });\n          Common.Dlog(JSON.stringify(this.subArray));\n      });\n\n      google.maps.event.addListener(this.drawingManager, \"drawingmode_changed\", () => {\n          Common.Dlog(\"drawingmode_changed\");\n          if (this.drawingManager.getDrawingMode() != null) {\n\n              this.shapes.forEach(shape => {\n                  shape.setMap(null);\n              });\n\n              this.shapes = [];\n              this.polygon = null;\n          }\n      });\n  }\n\n  serviceCheckClick(serviceObj: Service, event: any) {\n      serviceObj.isSelect = event.checked;\n      this.serviceWisePriceDocumentAll.find((item: ZoneAdd) => item.service_id == serviceObj.service_id)!.isSelect = event.checked;\n      this.serviceWisePriceDocument = this.serviceWisePriceDocumentAll.filter(item => item.isSelect == true);\n      this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n  }\n\n  serviceDocumentCheckedClick(serviceObj: ZoneAdd, docObj: Document, event: any) {\n      docObj.isSelect = event.checked;\n  }\n\n  getList() {\n\n      this.webService.action(Common.svListServiceDoc, {}, true).then((responseObj: any) => {\n\n          Common.Dlog(responseObj);\n          if (responseObj.status == 1) {\n              this.serviceList = responseObj.payload.service;\n\n              responseObj.payload.document.forEach((docObj: Document) => {\n                  docObj.isSelect = false;\n                  if (docObj.type == 1) {\n                      this.documentList.push(docObj);\n                  } else {\n                      this.carDocumentList.push(docObj);\n                  }\n              });\n\n              this.serviceList.forEach(serviceObj => {\n                  const priceObj = new ZoneAdd();\n                  priceObj.service_id = serviceObj.service_id;\n                  priceObj.service_name = serviceObj.service_name;\n                  priceObj.document_array = this.documentList;\n                  priceObj.car_document_array = this.carDocumentList;\n                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n              });\n          } else {\n              this.serviceList = [];\n          }\n          this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n      });\n  }\n\n  openSnackBar(message: string) {\n      this.snackBar.open(message, \"ok\", {\n          duration: 2000,\n      });\n  }\n\n  createZone() {\n      if (this.zoneName == '') {\n          this.openSnackBar(\"please enter zone name\");\n          return;\n      }\n\n      if (this.taxVal == '') {\n          this.openSnackBar(\"please enter tax value\");\n          return;\n      }\n\n      if (this.polygon == null || this.polygon == undefined) {\n          this.openSnackBar(\"please select zone area\");\n          return;\n      }\n\n      const dataObj = [];\n\n      for (let i = 0; i < this.serviceWisePriceDocument.length; i++) {\n          const serviceObj = this.serviceWisePriceDocument[i];\n\n          if (serviceObj.base_charge == '') {\n              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter base charge');\n              return;\n          }\n\n          if (serviceObj.per_km_charge == '') {\n              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per KM charge');\n              return;\n          }\n\n          if (serviceObj.per_minute_charge == '') {\n              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter per minute charge');\n              return;\n          }\n\n          if (serviceObj.booking_charge == '') {\n              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter booking charge');\n              return;\n          }\n\n          if (serviceObj.minimum_fair == '') {\n              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum fair');\n              return;\n          }\n\n          if (serviceObj.minimum_km == '') {\n              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter minimum km');\n              return;\n          }\n\n          if (serviceObj.cancel_charge == '') {\n              this.openSnackBar('\"' + serviceObj.service_name + '\" please enter cancel charge');\n              return;\n          }\n\n          serviceObj.document_id = this.getDocumentId(serviceObj.document_array);\n          serviceObj.car_document_id = this.getDocumentId(serviceObj.car_document_array);\n          const data = Object.assign({}, serviceObj);\n          data['document_array'] = [];\n          data['car_document_array'] = [];\n          dataObj.push(data);\n      }\n\n      const polygonBounds = this.polygon.getPath();\n      this.subArray = [];\n\n      polygonBounds.forEach((polygonLatlong: any) => {\n          this.subArray.push({ 'lat': polygonLatlong.lat(), 'lng': polygonLatlong.lng() });\n      });\n\n      const paraObj = {\n          \"zone_name\": this.zoneName,\n          \"city\": this.cityName,\n          \"zone_json\": JSON.stringify(this.subArray),\n          \"price_json\": JSON.stringify(dataObj),\n          \"tax\": this.taxVal.toString(),\n      }\n\n      Common.Dlog(paraObj);\n\n      this.webService.action(Common.svAddZone, paraObj, true).then((responseObj: any) => {\n\n          Common.Dlog(responseObj);\n          if (responseObj.status == 1) {\n              this.zoneName = '';\n              this.cityName = '';\n              this.taxVal = '';\n              this.serviceWisePriceDocumentAll = [];\n              this.serviceWisePriceDocument = [];\n\n              this.serviceList.forEach(serviceObj => {\n                  const priceObj = new ZoneAdd();\n                  priceObj.service_id = serviceObj.service_id;\n                  priceObj.service_name = serviceObj.service_name;\n                  priceObj.document_array = this.documentList;\n                  priceObj.car_document_array = this.carDocumentList;\n                  this.serviceWisePriceDocumentAll.push(JSON.parse(JSON.stringify(priceObj)));\n              });\n\n\n              this.shapes.forEach(shape => {\n                  shape.setMap(null);\n              })\n              this.shapes = [];\n              this.polygon = null;\n              this.dataSource = new MatTableDataSource(this.serviceWisePriceDocument);\n          }\n          this.openSnackBar(responseObj.message)\n\n      });\n\n  }\n\n  getDocumentId(docArr: Array<Document>, documentId: string = '') {\n      docArr.forEach(item => {\n          if (item.isSelect == true) {\n              documentId = documentId + item.doc_id.toString() + ',';\n          }\n      });\n\n      return documentId.replace(/,\\s*$/, '');\n  }\n\n\n\n\n}\n"
        }
    ]
}